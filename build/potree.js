!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("three")):"function"==typeof define&&define.amd?define("potree",["three"],e):"object"==typeof exports?exports.potree=e(require("three")):t.potree=e(t.three)}(window,(function(t){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=8)}([function(e,n){e.exports=t},function(t,e,n){"use strict";function i(t){this.content=[],this.scoreFunction=t}Object.defineProperty(e,"__esModule",{value:!0}),e.BinaryHeap=i,i.prototype={push:function(t){this.content.push(t),this.bubbleUp(this.content.length-1)},pop:function(){var t=this.content[0],e=this.content.pop();return this.content.length>0&&(this.content[0]=e,this.sinkDown(0)),t},remove:function(t){for(var e=this.content.length,n=0;n<e;n++)if(this.content[n]==t){var i=this.content.pop();if(n==e-1)break;this.content[n]=i,this.bubbleUp(n),this.sinkDown(n);break}},size:function(){return this.content.length},bubbleUp:function(t){for(var e=this.content[t],n=this.scoreFunction(e);t>0;){var i=Math.floor((t+1)/2)-1,o=this.content[i];if(n>=this.scoreFunction(o))break;this.content[i]=e,this.content[t]=o,t=i}},sinkDown:function(t){for(var e=this.content.length,n=this.content[t],i=this.scoreFunction(n);;){var o=2*(t+1),r=o-1,s=null;if(r<e){var a=this.content[r],l=this.scoreFunction(a);l<i&&(s=r)}if(o<e){var d=this.content[o];this.scoreFunction(d)<(null==s?i:l)&&(s=o)}if(null==s)break;this.content[t]=this.content[s],this.content[s]=n,t=s}}}},function(t,e,n){"use strict";n.r(e),e.default="precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    gl_Position =   projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"},function(t,e,n){"use strict";n.r(e),e.default="precision highp float;\nprecision highp int;\n\nuniform mat4 projectionMatrix;\n\nuniform float screenWidth;\nuniform float screenHeight;\n\nuniform sampler2D map;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\tfloat dx = 1.0 / screenWidth;\n\tfloat dy = 1.0 / screenHeight;\n\n\tvec3 color = vec3(0.0, 0.0, 0.0);\n\tcolor += texture2D(map, vUv + vec2(-dx, -dy)).rgb;\n\tcolor += texture2D(map, vUv + vec2(  0, -dy)).rgb;\n\tcolor += texture2D(map, vUv + vec2(+dx, -dy)).rgb;\n\tcolor += texture2D(map, vUv + vec2(-dx,   0)).rgb;\n\tcolor += texture2D(map, vUv + vec2(  0,   0)).rgb;\n\tcolor += texture2D(map, vUv + vec2(+dx,   0)).rgb;\n\tcolor += texture2D(map, vUv + vec2(-dx,  dy)).rgb;\n\tcolor += texture2D(map, vUv + vec2(  0,  dy)).rgb;\n\tcolor += texture2D(map, vUv + vec2(+dx,  dy)).rgb;\n    \n\tcolor = color / 9.0;\n\t\n\tgl_FragColor = vec4(color, 1.0);\n\t\n\t\n}"},function(t,e,n){"use strict";n.r(e),e.default="precision highp float;\nprecision highp int;\n\n#define max_clip_boxes 30\n\nattribute vec3 position;\nattribute vec3 color;\nattribute vec3 normal;\nattribute float intensity;\nattribute float classification;\nattribute float returnNumber;\nattribute float numberOfReturns;\nattribute float pointSourceID;\nattribute vec4 indices;\nattribute vec2 uv;\n\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\nuniform float pcIndex;\n\nuniform float screenWidth;\nuniform float screenHeight;\nuniform float fov;\nuniform float spacing;\n\n#if defined use_clip_box\nuniform mat4 clipBoxes[max_clip_boxes];\n#endif\n\nuniform float heightMin;\nuniform float heightMax;\nuniform float size; // pixel size factor\nuniform float minSize; // minimum pixel size\nuniform float maxSize; // maximum pixel size\nuniform float octreeSize;\nuniform vec3 bbSize;\nuniform vec3 uColor;\nuniform float opacity;\nuniform float clipBoxCount;\nuniform float level;\nuniform float vnStart;\nuniform bool isLeafNode;\n\nuniform float filterByNormalThreshold;\nuniform vec2 intensityRange;\nuniform float opacityAttenuation;\nuniform float intensityGamma;\nuniform float intensityContrast;\nuniform float intensityBrightness;\nuniform float rgbGamma;\nuniform float rgbContrast;\nuniform float rgbBrightness;\nuniform float transition;\nuniform float wRGB;\nuniform float wIntensity;\nuniform float wElevation;\nuniform float wClassification;\nuniform float wReturnNumber;\nuniform float wSourceID;\n\nuniform sampler2D visibleNodes;\nuniform sampler2D gradient;\nuniform sampler2D classificationLUT;\nuniform sampler2D depthMap;\n\n#ifdef use_texture_blending\nuniform sampler2D backgroundMap;\n#endif\n\n#ifdef use_point_cloud_mixing\nuniform int pointCloudMixingMode;\nuniform float pointCloudID;\n\nuniform float pointCloudMixAngle;\nuniform float stripeDistanceX;\nuniform float stripeDistanceY;\n\nuniform float stripeDivisorX;\nuniform float stripeDivisorY;\n#endif\n\n#ifdef highlight_point\nuniform vec3 highlightedPointCoordinate;\nuniform bool enablePointHighlighting;\nuniform float highlightedPointScale;\n#endif\n\n#ifdef use_filter_by_normal\nuniform int normalFilteringMode;\n#endif\n\nvarying vec3 vColor;\n\n#if !defined(color_type_point_index)\nvarying float vOpacity;\n#endif\n\n#if defined(weighted_splats)\nvarying float vLinearDepth;\n#endif\n\n#if !defined(paraboloid_point_shape) && defined(use_edl)\nvarying float vLogDepth;\n#endif\n\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\nvarying vec3 vViewPosition;\n#endif\n\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\nvarying float vRadius;\n#endif\n\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\nvarying vec3 vNormal;\n#endif\n\n#ifdef highlight_point\nvarying float vHighlight;\n#endif\n\n// ---------------------\n// OCTREE\n// ---------------------\n\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)\n\n/**\n * Rounds the specified number to the closest integer.\n */\nfloat round(float number) {\n\treturn floor(number + 0.5);\n}\n\n/**\n * Gets the number of 1-bits up to inclusive index position.\n *\n * number is treated as if it were an integer in the range 0-255\n */\nint numberOfOnes(int number, int index) {\n\tint numOnes = 0;\n\tint tmp = 128;\n\tfor(int i = 7; i >= 0; i--) {\n\n\t\tif(number >= tmp) {\n\t\t\tnumber = number - tmp;\n\n\t\t\tif(i <= index) {\n\t\t\t\tnumOnes++;\n\t\t\t}\n\t\t}\n\n\t\ttmp = tmp / 2;\n\t}\n\n\treturn numOnes;\n}\n\n/**\n * Checks whether the bit at index is 1.0\n *\n * number is treated as if it were an integer in the range 0-255\n */\nbool isBitSet(int number, int index) {\n\n\t// weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0\n\tint powi = 1;\n\tif(index == 0) {\n\t\tpowi = 1;\n\t} else if(index == 1) {\n\t\tpowi = 2;\n\t} else if(index == 2) {\n\t\tpowi = 4;\n\t} else if(index == 3) {\n\t\tpowi = 8;\n\t} else if(index == 4) {\n\t\tpowi = 16;\n\t} else if(index == 5) {\n\t\tpowi = 32;\n\t} else if(index == 6) {\n\t\tpowi = 64;\n\t} else if(index == 7) {\n\t\tpowi = 128;\n\t}\n\n\tint ndp = number / powi;\n\n\treturn mod(float(ndp), 2.0) != 0.0;\n}\n\n/**\n * Gets the the LOD at the point position.\n */\nfloat getLOD() {\n\tvec3 offset = vec3(0.0, 0.0, 0.0);\n\tint iOffset = int(vnStart);\n\tfloat depth = level;\n\n\tfor(float i = 0.0; i <= 30.0; i++) {\n\t\tfloat nodeSizeAtLevel = octreeSize / pow(2.0, i + level + 0.0);\n\n\t\tvec3 index3d = (position - offset) / nodeSizeAtLevel;\n\t\tindex3d = floor(index3d + 0.5);\n\t\tint index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));\n\n\t\tvec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));\n\t\tint mask = int(round(value.r * 255.0));\n\n\t\tif(isBitSet(mask, index)) {\n\t\t\t// there are more visible child nodes at this position\n\t\t\tint advanceG = int(round(value.g * 255.0)) * 256;\n\t\t\tint advanceB = int(round(value.b * 255.0));\n\t\t\tint advanceChild = numberOfOnes(mask, index - 1);\n\t\t\tint advance = advanceG + advanceB + advanceChild;\n\n\t\t\tiOffset = iOffset + advance;\n\n\t\t\tdepth++;\n\t\t} else {\n\t\t\treturn value.a * 255.0; // no more visible child nodes at this position\n\t\t}\n\n\t\toffset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;\n\t}\n\n\treturn depth;\n}\n\nfloat getPointSizeAttenuation() {\n\treturn 0.5 * pow(2.0, getLOD());\n}\n\n#endif\n\n// ---------------------\n// KD-TREE\n// ---------------------\n\n#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)\n\nfloat getLOD() {\n\tvec3 offset = vec3(0.0, 0.0, 0.0);\n\tfloat intOffset = 0.0;\n\tfloat depth = 0.0;\n\n\tvec3 size = bbSize;\n\tvec3 pos = position;\n\n\tfor(float i = 0.0; i <= 1000.0; i++) {\n\n\t\tvec4 value = texture2D(visibleNodes, vec2(intOffset / 2048.0, 0.0));\n\n\t\tint children = int(value.r * 255.0);\n\t\tfloat next = value.g * 255.0;\n\t\tint split = int(value.b * 255.0);\n\n\t\tif(next == 0.0) {\n\t\t\treturn depth;\n\t\t}\n\n\t\tvec3 splitv = vec3(0.0, 0.0, 0.0);\n\t\tif(split == 1) {\n\t\t\tsplitv.x = 1.0;\n\t\t} else if(split == 2) {\n\t\t\tsplitv.y = 1.0;\n\t\t} else if(split == 4) {\n\t\t\tsplitv.z = 1.0;\n\t\t}\n\n\t\tintOffset = intOffset + next;\n\n\t\tfloat factor = length(pos * splitv / size);\n\t\tif(factor < 0.5) {\n\t\t \t// left\n\t\t\tif(children == 0 || children == 2) {\n\t\t\t\treturn depth;\n\t\t\t}\n\t\t} else {\n\t\t\t// right\n\t\t\tpos = pos - size * splitv * 0.5;\n\t\t\tif(children == 0 || children == 1) {\n\t\t\t\treturn depth;\n\t\t\t}\n\t\t\tif(children == 3) {\n\t\t\t\tintOffset = intOffset + 1.0;\n\t\t\t}\n\t\t}\n\t\tsize = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);\n\n\t\tdepth++;\n\t}\n\n\treturn depth;\n}\n\nfloat getPointSizeAttenuation() {\n\treturn 0.5 * pow(1.3, getLOD());\n}\n\n#endif\n\n// formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/\nfloat getContrastFactor(float contrast) {\n\treturn (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);\n}\n\nvec3 getRGB() {\n\t#if defined(use_rgb_gamma_contrast_brightness)\n\tvec3 rgb = color;\n\trgb = pow(rgb, vec3(rgbGamma));\n\trgb = rgb + rgbBrightness;\n\trgb = (rgb - 0.5) * getContrastFactor(rgbContrast) + 0.5;\n\trgb = clamp(rgb, 0.0, 1.0);\n\treturn rgb;\n\t#else\n\treturn color;\n\t#endif\n}\n\nfloat getIntensity() {\n\tfloat w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);\n\tw = pow(w, intensityGamma);\n\tw = w + intensityBrightness;\n\tw = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;\n\tw = clamp(w, 0.0, 1.0);\n\n\treturn w;\n}\n\nvec3 getElevation() {\n\tvec4 world = modelMatrix * vec4(position, 1.0);\n\tfloat w = (world.z - heightMin) / (heightMax - heightMin);\n\tvec3 cElevation = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\n\n\treturn cElevation;\n}\n\nvec4 getClassification() {\n\tvec2 uv = vec2(classification / 255.0, 0.5);\n\tvec4 classColor = texture2D(classificationLUT, uv);\n\n\treturn classColor;\n}\n\nvec3 getReturnNumber() {\n\tif(numberOfReturns == 1.0) {\n\t\treturn vec3(1.0, 1.0, 0.0);\n\t} else {\n\t\tif(returnNumber == 1.0) {\n\t\t\treturn vec3(1.0, 0.0, 0.0);\n\t\t} else if(returnNumber == numberOfReturns) {\n\t\t\treturn vec3(0.0, 0.0, 1.0);\n\t\t} else {\n\t\t\treturn vec3(0.0, 1.0, 0.0);\n\t\t}\n\t}\n}\n\nvec3 getSourceID() {\n\tfloat w = mod(pointSourceID, 10.0) / 10.0;\n\treturn texture2D(gradient, vec2(w, 1.0 - w)).rgb;\n}\n\nvec3 getCompositeColor() {\n\tvec3 c;\n\tfloat w;\n\n\tc += wRGB * getRGB();\n\tw += wRGB;\n\n\tc += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);\n\tw += wIntensity;\n\n\tc += wElevation * getElevation();\n\tw += wElevation;\n\n\tc += wReturnNumber * getReturnNumber();\n\tw += wReturnNumber;\n\n\tc += wSourceID * getSourceID();\n\tw += wSourceID;\n\n\tvec4 cl = wClassification * getClassification();\n\tc += cl.a * cl.rgb;\n\tw += wClassification * cl.a;\n\n\tc = c / w;\n\n\tif(w == 0.0) {\n\t\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\n\t}\n\n\treturn c;\n}\n\nvoid main() {\n\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\n\tvViewPosition = mvPosition.xyz;\n\t#endif\n\n\t#if defined weighted_splats\n\tvLinearDepth = gl_Position.w;\n\t#endif\n\n\t#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\n\tvNormal = normalize(normalMatrix * normal);\n\t#endif\n\n\t#if !defined(paraboloid_point_shape) && defined(use_edl)\n\tvLogDepth = log2(-mvPosition.z);\n\t#endif\n\n\t// ---------------------\n\t// POINT SIZE\n\t// ---------------------\n\n\tfloat pointSize = 1.0;\n\tfloat slope = tan(fov / 2.0);\n\tfloat projFactor = -0.5 * screenHeight / (slope * mvPosition.z);\n\n\t#if defined fixed_point_size\n\tpointSize = size;\n\t#elif defined attenuated_point_size\n\tpointSize = size * spacing * projFactor;\n\t#elif defined adaptive_point_size\n\tfloat worldSpaceSize = 2.0 * size * spacing / getPointSizeAttenuation();\n\tpointSize = worldSpaceSize * projFactor;\n\t#endif\n\n\tpointSize = max(minSize, pointSize);\n\tpointSize = min(maxSize, pointSize);\n\n\t#if defined(weighted_splats) || defined(paraboloid_point_shape)\n\tvRadius = pointSize / projFactor;\n\t#endif\n\n\tgl_PointSize = pointSize;\n\n\t// ---------------------\n\t// HIGHLIGHTING\n\t// ---------------------\n\n\t#ifdef highlight_point\n\tvec4 mPosition = modelMatrix * vec4(position, 1.0);\n\tif(enablePointHighlighting && abs(mPosition.x - highlightedPointCoordinate.x) < 0.0001 &&\n\t\tabs(mPosition.y - highlightedPointCoordinate.y) < 0.0001 &&\n\t\tabs(mPosition.z - highlightedPointCoordinate.z) < 0.0001) {\n\t\tvHighlight = 1.0;\n\t\tgl_PointSize = pointSize * highlightedPointScale;\n\t} else {\n\t\tvHighlight = 0.0;\n\t}\n\t#endif\n\n\t// ---------------------\n\t// OPACITY\n\t// ---------------------\n\n\t#ifndef color_type_point_index\n\t\t#ifdef attenuated_opacity\n\tvOpacity = opacity * exp(-length(-mvPosition.xyz) / opacityAttenuation);\n\t\t#else\n\tvOpacity = opacity;\n\t\t#endif\n\t#endif\n\n\t// ---------------------\n\t// FILTERING\n\t// ---------------------\n\n\t#ifdef use_filter_by_normal\n\tbool discardPoint = false;\n\t\t// Absolute normal filtering\n\tif(normalFilteringMode == 1) {\n\t\tdiscardPoint = (abs((modelViewMatrix * vec4(normal, 0.0)).z) > filterByNormalThreshold);\n\t}\n\t\t// less than equal to\n\telse if(normalFilteringMode == 2) {\n\t\tdiscardPoint = (modelViewMatrix * vec4(normal, 0.0)).z <= filterByNormalThreshold;\n\t}\n\t\t// greater than\n\telse if(normalFilteringMode == 3) {\n\t\tdiscardPoint = (modelViewMatrix * vec4(normal, 0.0)).z > filterByNormalThreshold;\n\t}\n\n\tif(discardPoint) {\n\t\tgl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\t}\n\t#endif\n\n\t// ---------------------\n\t// POINT COLOR\n\t// ---------------------\n\n\tvec4 cl = getClassification();\n\n\t#ifdef color_type_rgb\n\tvColor = getRGB();\n\t#elif defined color_type_height\n\tvColor = getElevation();\n\t#elif defined color_type_rgb_height\n\tvec3 cHeight = getElevation();\n\tvColor = (1.0 - transition) * getRGB() + transition * cHeight;\n\t#elif defined color_type_depth\n\tfloat linearDepth = -mvPosition.z;\n\tfloat expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;\n\tvColor = vec3(linearDepth, expDepth, 0.0);\n\t#elif defined color_type_intensity\n\tfloat w = getIntensity();\n\tvColor = vec3(w, w, w);\n\t#elif defined color_type_intensity_gradient\n\tfloat w = getIntensity();\n\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\n\t#elif defined color_type_color\n\tvColor = uColor;\n\t#elif defined color_type_lod\n\tfloat w = getLOD() / 10.0;\n\tvColor = texture2D(gradient, vec2(w, 1.0 - w)).rgb;\n\t#elif defined color_type_point_index\n\tvColor = indices.rgb;\n\t#elif defined color_type_classification\n\tvColor = cl.rgb;\n\t#elif defined color_type_return_number\n\tvColor = getReturnNumber();\n\t#elif defined color_type_source\n\tvColor = getSourceID();\n\t#elif defined color_type_normal\n\tvColor = (modelMatrix * vec4(normal, 0.0)).xyz;\n\t#elif defined color_type_phong\n\tvColor = color;\n\t#elif defined color_type_composite\n\tvColor = getCompositeColor();\n\t#endif\n\n\t#if !defined color_type_composite && defined color_type_classification\n\tif(cl.a == 0.0) {\n\t\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\n\t\treturn;\n\t}\n\t#endif\n\n\t// ---------------------\n\t// CLIPPING\n\t// ---------------------\n\tif(cl.a == 0.0) {\n\t\tgl_Position = vec4(100.0, 100.0, 100.0, 0.0);\n\t\treturn;\n\t}\n\n\t#if defined use_clip_box\n\tbool insideAny = false;\n\tfor(int i = 0; i < max_clip_boxes; i++) {\n\t\tif(i == int(clipBoxCount)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tvec4 clipPosition = clipBoxes[i] * modelMatrix * vec4(position, 1.0);\n\t\tbool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;\n\t\tinside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;\n\t\tinside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;\n\t\tinsideAny = insideAny || inside;\n\t}\n\n\tif(!insideAny) {\n\t\t\t#if defined clip_outside\n\t\tgl_Position = vec4(1000.0, 1000.0, 1000.0, 1.0);\n\t\t\t#elif defined clip_highlight_inside && !defined(color_type_depth)\n\t\tfloat c = (vColor.r + vColor.g + vColor.b) / 6.0;\n\t\t\t#endif\n\t} else {\n\t\t\t#if defined clip_highlight_inside\n\t\tvColor.r += 0.5;\n\t\t\t#endif\n\t}\n\t#endif\n}\n"},function(t,e,n){"use strict";n.r(e),e.default="precision highp float;\nprecision highp int;\n\n#if defined paraboloid_point_shape\n\t#extension GL_EXT_frag_depth : enable\n#endif\n\nuniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n\nuniform mat4 projectionMatrix;\nuniform float opacity;\n\nuniform float blendHardness;\nuniform float blendDepthSupplement;\nuniform float fov;\nuniform float spacing;\nuniform float pcIndex;\nuniform float screenWidth;\nuniform float screenHeight;\n\nuniform sampler2D depthMap;\n\n#if defined (clip_horizontally) || defined (clip_vertically)\n\tuniform vec4 clipExtent;\n#endif\n\n#ifdef use_texture_blending\n\tuniform sampler2D backgroundMap;\n#endif\n\n\n#ifdef use_point_cloud_mixing\n\tuniform int pointCloudMixingMode;\n\tuniform float pointCloudID;\n\tuniform float pointCloudMixAngle;\n\tuniform float stripeDistanceX;\n\tuniform float stripeDistanceY;\n\n\tuniform float stripeDivisorX;\n\tuniform float stripeDivisorY;\n#endif\n\n#ifdef highlight_point\n\tuniform vec4 highlightedPointColor;\n#endif\n\nvarying vec3 vColor;\n\n#if !defined(color_type_point_index)\n\tvarying float vOpacity;\n#endif\n\n#if defined(weighted_splats)\n\tvarying float vLinearDepth;\n#endif\n\n#if !defined(paraboloid_point_shape) && defined(use_edl)\n\tvarying float vLogDepth;\n#endif\n\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0) || defined(paraboloid_point_shape)\n\tvarying vec3 vViewPosition;\n#endif\n\n#if defined(weighted_splats) || defined(paraboloid_point_shape)\n\tvarying float vRadius;\n#endif\n\n#if defined(color_type_phong) && (MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0)\n\tvarying vec3 vNormal;\n#endif\n\n#ifdef highlight_point\n\tvarying float vHighlight;\n#endif\n\nfloat specularStrength = 1.0;\n\nvoid main() {\n\tvec3 color = vColor;\n\tfloat depth = gl_FragCoord.z;\n\n\t#if defined (clip_horizontally) || defined (clip_vertically)\n\tvec2 ndc = vec2((gl_FragCoord.x / screenWidth), 1.0 - (gl_FragCoord.y / screenHeight));\n\n\tif(step(clipExtent.x, ndc.x) * step(ndc.x, clipExtent.z) < 1.0)\n\t{\n\t\tdiscard;\n\t}\n\n\tif(step(clipExtent.y, ndc.y) * step(ndc.y, clipExtent.w) < 1.0)\n\t{\n\t\tdiscard;\n\t}\n\t#endif  \n\n\t#if defined(circle_point_shape) || defined(paraboloid_point_shape) || defined (weighted_splats)\n\t\tfloat u = 2.0 * gl_PointCoord.x - 1.0;\n\t\tfloat v = 2.0 * gl_PointCoord.y - 1.0;\n\t#endif\n\n\t#if defined(circle_point_shape) || defined (weighted_splats)\n\t\tfloat cc = u*u + v*v;\n\t\tif(cc > 1.0){\n\t\t\tdiscard;\n\t\t}\n\t#endif\n\n\t#if defined weighted_splats\n\t\tvec2 uv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\n\t\tfloat sDepth = texture2D(depthMap, uv).r;\n\t\tif(vLinearDepth > sDepth + vRadius + blendDepthSupplement){\n\t\t\tdiscard;\n\t\t}\n\t#endif\n\n\t#if defined color_type_point_index\n\t\tgl_FragColor = vec4(color, pcIndex / 255.0);\n\t#else\n\t\tgl_FragColor = vec4(color, vOpacity);\n\t#endif\n\n\t#ifdef use_point_cloud_mixing\n\t\tbool discardFragment = false;\n\n\t\tif (pointCloudMixingMode == 1) {  // Checkboard\n\t\t\tfloat vPointCloudID = pointCloudID > 10. ? pointCloudID/10.: pointCloudID;\n\t\t\tdiscardFragment = mod(gl_FragCoord.x, vPointCloudID) > 0.5 && mod(gl_FragCoord.y, vPointCloudID) > 0.5;\n\t\t}\n\t\telse if (pointCloudMixingMode == 2) {  // Stripes\n\t\t\tfloat angle = pointCloudMixAngle * pointCloudID / 180.;\n\t\t\tfloat u = cos(angle) * gl_FragCoord.x + sin(angle) * gl_FragCoord.y;\n\t\t\tfloat v = -sin(angle) * gl_FragCoord.x + cos(angle) * gl_FragCoord.y;\n\n\t\t\tdiscardFragment = mod(u, stripeDistanceX) >= stripeDistanceX/stripeDivisorX && mod(v, stripeDistanceY) >= stripeDistanceY/stripeDivisorY;\n\t\t}\n\t\tif (discardFragment) {\n\t\t\tdiscard;\n\t\t}\n\t#endif\n\n\t#ifdef use_texture_blending\n\t\tvec2 vUv = gl_FragCoord.xy / vec2(screenWidth, screenHeight);\n\n\t\tvec4 tColor = texture2D(backgroundMap, vUv);\n\t\tgl_FragColor = vec4(vOpacity * color, 1.) + vec4((1. - vOpacity) * tColor.rgb, 0.);\n\t#endif\n\n\t#if defined(color_type_phong)\n\t\t#if MAX_POINT_LIGHTS > 0 || MAX_DIR_LIGHTS > 0\n\t\t\tvec3 normal = normalize( vNormal );\n\t\t\tnormal.z = abs(normal.z);\n\n\t\t\tvec3 viewPosition = normalize( vViewPosition );\n\t\t#endif\n\n\t\t// code taken from three.js phong light fragment shader\n\n\t\t#if MAX_POINT_LIGHTS > 0\n\n\t\t\tvec3 pointDiffuse = vec3( 0.0 );\n\t\t\tvec3 pointSpecular = vec3( 0.0 );\n\n\t\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\t\tfloat lDistance = 1.0;\n\t\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\t\tlVector = normalize( lVector );\n\n\t\t\t\t\t\t// diffuse\n\n\t\t\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t\t#else\n\n\t\t\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t\t#endif\n\n\t\t\t\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\n\n\t\t\t\t// specular\n\n\t\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\t\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n\t\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\t\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n\t\t\t\tpointSpecular = vec3(0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t#endif\n\n\t\t#if MAX_DIR_LIGHTS > 0\n\n\t\t\tvec3 dirDiffuse = vec3( 0.0 );\n\t\t\tvec3 dirSpecular = vec3( 0.0 );\n\n\t\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\t\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\t\t\t\t// diffuse\n\n\t\t\t\tfloat dotProduct = dot( normal, dirVector );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t\t#else\n\n\t\t\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t\t#endif\n\n\t\t\t\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\n\t\t\t\t// specular\n\n\t\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\t\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n\t\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\t\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\t\t\t}\n\n\t\t#endif\n\n\t\tvec3 totalDiffuse = vec3( 0.0 );\n\t\tvec3 totalSpecular = vec3( 0.0 );\n\n\t\t#if MAX_POINT_LIGHTS > 0\n\n\t\t\ttotalDiffuse += pointDiffuse;\n\t\t\ttotalSpecular += pointSpecular;\n\n\t\t#endif\n\n\t\t#if MAX_DIR_LIGHTS > 0\n\n\t\t\ttotalDiffuse += dirDiffuse;\n\t\t\ttotalSpecular += dirSpecular;\n\n\t\t#endif\n\n\t\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n\n\t#endif\n\n\t#if defined weighted_splats\n\t    //float w = pow(1.0 - (u*u + v*v), blendHardness);\n\n\t\tfloat wx = 2.0 * length(2.0 * gl_PointCoord - 1.0);\n\t\tfloat w = exp(-wx * wx * 0.5);\n\n\t\t//float distance = length(2.0 * gl_PointCoord - 1.0);\n\t\t//float w = exp( -(distance * distance) / blendHardness);\n\n\t\tgl_FragColor.rgb = gl_FragColor.rgb * w;\n\t\tgl_FragColor.a = w;\n\t#endif\n\n\t#if defined paraboloid_point_shape\n\t\tfloat wi = 0.0 - ( u*u + v*v);\n\t\tvec4 pos = vec4(vViewPosition, 1.0);\n\t\tpos.z += wi * vRadius;\n\t\tfloat linearDepth = -pos.z;\n\t\tpos = projectionMatrix * pos;\n\t\tpos = pos / pos.w;\n\t\tfloat expDepth = pos.z;\n\t\tdepth = (pos.z + 1.0) / 2.0;\n\t\tgl_FragDepthEXT = depth;\n\n\t\t#if defined(color_type_depth)\n\t\t\tgl_FragColor.r = linearDepth;\n\t\t\tgl_FragColor.g = expDepth;\n\t\t#endif\n\n\t\t#if defined(use_edl)\n\t\t\tgl_FragColor.a = log2(linearDepth);\n\t\t#endif\n\n\t#else\n\t\t#if defined(use_edl)\n\t\t\tgl_FragColor.a = vLogDepth;\n\t\t#endif\n\t#endif\n\n\t#ifdef highlight_point\n\t\tif (vHighlight > 0.0) {\n\t\t\tgl_FragColor = highlightedPointColor;\n\t\t}\n\t#endif\n}\n"},function(t,e,n){t.exports=function(){return n(7)('!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var r=n(1);onmessage=r.handleMessage},function(t,e,n){"use strict";var r;n.r(e),n.d(e,"handleMessage",(function(){return I})),function(t){t[t.POSITION_CARTESIAN=0]="POSITION_CARTESIAN",t[t.COLOR_PACKED=1]="COLOR_PACKED",t[t.COLOR_FLOATS_1=2]="COLOR_FLOATS_1",t[t.COLOR_FLOATS_255=3]="COLOR_FLOATS_255",t[t.NORMAL_FLOATS=4]="NORMAL_FLOATS",t[t.FILLER=5]="FILLER",t[t.INTENSITY=6]="INTENSITY",t[t.CLASSIFICATION=7]="CLASSIFICATION",t[t.NORMAL_SPHEREMAPPED=8]="NORMAL_SPHEREMAPPED",t[t.NORMAL_OCT16=9]="NORMAL_OCT16",t[t.NORMAL=10]="NORMAL"}(r||(r={}));const i={ordinal:1,size:4},o={ordinal:2,size:1},s={ordinal:3,size:1},u={ordinal:5,size:2};function a(t,e,n){return{name:t,type:e,numElements:n,byteSize:n*e.size}}const f=a(r.COLOR_PACKED,o,4),A={POSITION_CARTESIAN:a(r.POSITION_CARTESIAN,i,3),RGBA_PACKED:f,COLOR_PACKED:f,RGB_PACKED:a(r.COLOR_PACKED,o,3),NORMAL_FLOATS:a(r.NORMAL_FLOATS,i,3),FILLER_1B:a(r.FILLER,s,1),INTENSITY:a(r.INTENSITY,u,1),CLASSIFICATION:a(r.CLASSIFICATION,s,1),NORMAL_SPHEREMAPPED:a(r.NORMAL_SPHEREMAPPED,s,2),NORMAL_OCT16:a(r.NORMAL_OCT16,s,2),NORMAL:a(r.NORMAL,i,3)};class O{constructor(t){this.versionMinor=0,this.version=t;const e=-1===t.indexOf(".")?t.length:t.indexOf(".");this.versionMajor=parseInt(t.substr(0,e),10),this.versionMinor=parseInt(t.substr(e+1),10),isNaN(this.versionMinor)&&(this.versionMinor=0)}newerThan(t){const e=new O(t);return this.versionMajor>e.versionMajor||this.versionMajor===e.versionMajor&&this.versionMinor>e.versionMinor}equalOrHigher(t){const e=new O(t);return this.versionMajor>e.versionMajor||this.versionMajor===e.versionMajor&&this.versionMinor>=e.versionMinor}upTo(t){return!this.newerThan(t)}}class c{constructor(t){this.tmp=new ArrayBuffer(4),this.tmpf=new Float32Array(this.tmp),this.tmpu8=new Uint8Array(this.tmp),this.u8=new Uint8Array(t)}getUint32(t){return this.u8[t+3]<<24|this.u8[t+2]<<16|this.u8[t+1]<<8|this.u8[t]}getUint16(t){return this.u8[t+1]<<8|this.u8[t]}getFloat32(t){const e=this.tmpu8,n=this.u8,r=this.tmpf;return e[0]=n[t+0],e[1]=n[t+1],e[2]=n[t+2],e[3]=n[t+3],r[0]}getUint8(t){return this.u8[t]}}const b=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1};function I(t){const e=t.data.buffer,n=t.data.pointAttributes,i={attributeBuffers:{},currentOffset:0,data:new c(e),mean:[0,0,0],nodeOffset:t.data.offset,numPoints:t.data.buffer.byteLength/n.byteSize,pointAttributes:n,scale:t.data.scale,tightBoxMax:[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],tightBoxMin:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],transferables:[],version:new O(t.data.version)};for(const t of i.pointAttributes.attributes)M(t,i),i.currentOffset+=t.byteSize;const o=new ArrayBuffer(4*i.numPoints),s=new Uint32Array(o);for(let t=0;t<i.numPoints;t++)s[t]=t;i.attributeBuffers[r.CLASSIFICATION]||function(t){const e=new ArrayBuffer(4*t.numPoints),n=new Float32Array(e);for(let e=0;e<t.numPoints;e++)n[e]=0;t.attributeBuffers[r.CLASSIFICATION]={buffer:e,attribute:A.CLASSIFICATION}}(i);const u={buffer:e,mean:i.mean,attributeBuffers:i.attributeBuffers,tightBoundingBox:{min:i.tightBoxMin,max:i.tightBoxMax},indices:o};postMessage(u,i.transferables)}function M(t,e){const n=function(t,e){switch(t.name){case r.POSITION_CARTESIAN:return function(t,e){const n=new ArrayBuffer(4*e.numPoints*3),r=new Float32Array(n);for(let t=0;t<e.numPoints;t++){let n,i,o;e.version.newerThan("1.3")?(n=e.data.getUint32(e.currentOffset+t*e.pointAttributes.byteSize+0)*e.scale,i=e.data.getUint32(e.currentOffset+t*e.pointAttributes.byteSize+4)*e.scale,o=e.data.getUint32(e.currentOffset+t*e.pointAttributes.byteSize+8)*e.scale):(n=e.data.getFloat32(t*e.pointAttributes.byteSize+0)+e.nodeOffset[0],i=e.data.getFloat32(t*e.pointAttributes.byteSize+4)+e.nodeOffset[1],o=e.data.getFloat32(t*e.pointAttributes.byteSize+8)+e.nodeOffset[2]),r[3*t+0]=n,r[3*t+1]=i,r[3*t+2]=o,e.mean[0]+=n/e.numPoints,e.mean[1]+=i/e.numPoints,e.mean[2]+=o/e.numPoints,e.tightBoxMin[0]=Math.min(e.tightBoxMin[0],n),e.tightBoxMin[1]=Math.min(e.tightBoxMin[1],i),e.tightBoxMin[2]=Math.min(e.tightBoxMin[2],o),e.tightBoxMax[0]=Math.max(e.tightBoxMax[0],n),e.tightBoxMax[1]=Math.max(e.tightBoxMax[1],i),e.tightBoxMax[2]=Math.max(e.tightBoxMax[2],o)}return{buffer:n,attribute:t}}(t,e);case r.COLOR_PACKED:return function(t,e){const n=new ArrayBuffer(3*e.numPoints),r=new Uint8Array(n);for(let t=0;t<e.numPoints;t++)r[3*t+0]=e.data.getUint8(e.currentOffset+t*e.pointAttributes.byteSize+0),r[3*t+1]=e.data.getUint8(e.currentOffset+t*e.pointAttributes.byteSize+1),r[3*t+2]=e.data.getUint8(e.currentOffset+t*e.pointAttributes.byteSize+2);return{buffer:n,attribute:t}}(t,e);case r.INTENSITY:return function(t,e){const n=new ArrayBuffer(4*e.numPoints),r=new Float32Array(n);for(let t=0;t<e.numPoints;t++)r[t]=e.data.getUint16(e.currentOffset+t*e.pointAttributes.byteSize);return{buffer:n,attribute:t}}(t,e);case r.CLASSIFICATION:return function(t,e){const n=new ArrayBuffer(e.numPoints),r=new Uint8Array(n);for(let t=0;t<e.numPoints;t++)r[t]=e.data.getUint8(e.currentOffset+t*e.pointAttributes.byteSize);return{buffer:n,attribute:t}}(t,e);case r.NORMAL_SPHEREMAPPED:return function(t,e){const n=new ArrayBuffer(4*e.numPoints*3),r=new Float32Array(n);for(let t=0;t<e.numPoints;t++){const n=e.data.getUint8(e.currentOffset+t*e.pointAttributes.byteSize+0),i=e.data.getUint8(e.currentOffset+t*e.pointAttributes.byteSize+1);let o=2*(n/255)-1,s=2*(i/255)-1,u=1;const a=o*-o+s*-s+u*- -1;u=a,o*=Math.sqrt(a),s*=Math.sqrt(a),o*=2,s*=2,u=2*u-1,r[3*t+0]=o,r[3*t+1]=s,r[3*t+2]=u}return{buffer:n,attribute:t}}(t,e);case r.NORMAL_OCT16:return function(t,e){const n=new ArrayBuffer(4*e.numPoints*3),r=new Float32Array(n);for(let t=0;t<e.numPoints;t++){const n=e.data.getUint8(e.currentOffset+t*e.pointAttributes.byteSize+0),i=e.data.getUint8(e.currentOffset+t*e.pointAttributes.byteSize+1),o=n/255*2-1,s=i/255*2-1;let u=1-Math.abs(o)-Math.abs(s),a=0,f=0;u>=0?(a=o,f=s):(a=-(s/b(s)-1)/b(o),f=-(o/b(o)-1)/b(s));const A=Math.sqrt(a*a+f*f+u*u);a/=A,f/=A,u/=A,r[3*t+0]=a,r[3*t+1]=f,r[3*t+2]=u}return{buffer:n,attribute:t}}(t,e);case r.NORMAL:return function(t,e){const n=new ArrayBuffer(4*e.numPoints*3),r=new Float32Array(n);for(let t=0;t<e.numPoints;t++){const n=e.data.getFloat32(e.currentOffset+t*e.pointAttributes.byteSize+0),i=e.data.getFloat32(e.currentOffset+t*e.pointAttributes.byteSize+4),o=e.data.getFloat32(e.currentOffset+t*e.pointAttributes.byteSize+8);r[3*t+0]=n,r[3*t+1]=i,r[3*t+2]=o}return{buffer:n,attribute:t}}(t,e);default:return}}(t,e);void 0!==n&&(e.attributeBuffers[n.attribute.name]=n,e.transferables.push(n.buffer))}}]);',null)}},function(t,e,n){"use strict";var i=window.URL||window.webkitURL;t.exports=function(t,e){try{try{var n;try{(n=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder)).append(t),n=n.getBlob()}catch(e){n=new Blob([t])}return new Worker(i.createObjectURL(n))}catch(e){return new Worker("data:application/javascript,"+encodeURIComponent(t))}}catch(t){if(!e)throw Error("Inline worker is not supported");return new Worker(e)}}},function(t,e,n){"use strict";n.r(e),n.d(e,"BlurMaterial",(function(){return h})),n.d(e,"ClipMode",(function(){return i})),n.d(e,"PointSizeType",(function(){return o})),n.d(e,"PointShape",(function(){return r})),n.d(e,"TreeType",(function(){return s})),n.d(e,"PointOpacityType",(function(){return a})),n.d(e,"PointColorType",(function(){return l})),n.d(e,"NormalFilteringMode",(function(){return d})),n.d(e,"PointCloudMixingMode",(function(){return u})),n.d(e,"PointCloudMaterial",(function(){return z})),n.d(e,"generateDataTexture",(function(){return N})),n.d(e,"generateGradientTexture",(function(){return S})),n.d(e,"generateClassificationTexture",(function(){return O})),n.d(e,"GRAYSCALE",(function(){return _})),n.d(e,"INFERNO",(function(){return b})),n.d(e,"PLASMA",(function(){return T})),n.d(e,"RAINBOW",(function(){return A})),n.d(e,"SPECTRAL",(function(){return w})),n.d(e,"VIRIDIS",(function(){return C})),n.d(e,"YELLOW_GREEN",(function(){return I})),n.d(e,"PointAttributeName",(function(){return V})),n.d(e,"POINT_ATTRIBUTE_TYPES",(function(){return k})),n.d(e,"POINT_ATTRIBUTES",(function(){return Y})),n.d(e,"PointAttributes",(function(){return X})),n.d(e,"PointCloudOctreeGeometryNode",(function(){return $})),n.d(e,"PointCloudOctreeGeometry",(function(){return J})),n.d(e,"PointCloudOctreeNode",(function(){return tt})),n.d(e,"PointCloudOctreePicker",(function(){return nt})),n.d(e,"PointCloudOctree",(function(){return ot})),n.d(e,"PointCloudTree",(function(){return it})),n.d(e,"QueueItem",(function(){return Tt})),n.d(e,"Potree",(function(){return At})),n.d(e,"Version",(function(){return ht}));var i,o,r,s,a,l,d,u,c=n(0);class h extends c.ShaderMaterial{constructor(){super(...arguments),this.vertexShader=n(2),this.fragmentShader=n(3),this.uniforms={screenWidth:{type:"f",value:0},screenHeight:{type:"f",value:0},map:{type:"t",value:null}}}}!function(t){t[t.DISABLED=0]="DISABLED",t[t.CLIP_OUTSIDE=1]="CLIP_OUTSIDE",t[t.HIGHLIGHT_INSIDE=2]="HIGHLIGHT_INSIDE",t[t.CLIP_HORIZONTALLY=3]="CLIP_HORIZONTALLY",t[t.CLIP_VERTICALLY=4]="CLIP_VERTICALLY"}(i||(i={})),function(t){t[t.FIXED=0]="FIXED",t[t.ATTENUATED=1]="ATTENUATED",t[t.ADAPTIVE=2]="ADAPTIVE"}(o||(o={})),function(t){t[t.SQUARE=0]="SQUARE",t[t.CIRCLE=1]="CIRCLE",t[t.PARABOLOID=2]="PARABOLOID"}(r||(r={})),function(t){t[t.OCTREE=0]="OCTREE",t[t.KDTREE=1]="KDTREE"}(s||(s={})),function(t){t[t.FIXED=0]="FIXED",t[t.ATTENUATED=1]="ATTENUATED"}(a||(a={})),function(t){t[t.RGB=0]="RGB",t[t.COLOR=1]="COLOR",t[t.DEPTH=2]="DEPTH",t[t.HEIGHT=3]="HEIGHT",t[t.ELEVATION=3]="ELEVATION",t[t.INTENSITY=4]="INTENSITY",t[t.INTENSITY_GRADIENT=5]="INTENSITY_GRADIENT",t[t.LOD=6]="LOD",t[t.LEVEL_OF_DETAIL=6]="LEVEL_OF_DETAIL",t[t.POINT_INDEX=7]="POINT_INDEX",t[t.CLASSIFICATION=8]="CLASSIFICATION",t[t.RETURN_NUMBER=9]="RETURN_NUMBER",t[t.SOURCE=10]="SOURCE",t[t.NORMAL=11]="NORMAL",t[t.PHONG=12]="PHONG",t[t.RGB_HEIGHT=13]="RGB_HEIGHT",t[t.COMPOSITE=50]="COMPOSITE"}(l||(l={})),function(t){t[t.ABSOLUTE_NORMAL_FILTERING_MODE=1]="ABSOLUTE_NORMAL_FILTERING_MODE",t[t.LESS_EQUAL_NORMAL_FILTERING_MODE=2]="LESS_EQUAL_NORMAL_FILTERING_MODE",t[t.GREATER_NORMAL_FILTERING_MODE=3]="GREATER_NORMAL_FILTERING_MODE"}(d||(d={})),function(t){t[t.CHECKBOARD=1]="CHECKBOARD",t[t.STRIPES=2]="STRIPES"}(u||(u={}));const f=new c.Color(0,0,0),p=new c.Vector4(1,0,0,1);function g(t){return parseInt(t.charAt(t.length-1),10)}function m(t,e){const n=t.name,i=e.name;return n.length!==i.length?n.length-i.length:n<i?-1:n>i?1:0}function v(t){if(200!==t.status)throw Error("Response error");return t}function x(t){if(!t||0===t.byteLength)throw Error("Empty buffer");return t}const y={0:{visible:!0,color:new c.Vector4(.5,.5,.5,1)},1:{visible:!0,color:new c.Vector4(.5,.5,.5,1)},2:{visible:!0,color:new c.Vector4(.63,.32,.18,1)},3:{visible:!0,color:new c.Vector4(0,1,0,1)},4:{visible:!0,color:new c.Vector4(0,.8,0,1)},5:{visible:!0,color:new c.Vector4(0,.6,0,1)},6:{visible:!0,color:new c.Vector4(1,.66,0,1)},7:{visible:!0,color:new c.Vector4(1,0,1,1)},8:{visible:!0,color:new c.Vector4(1,0,0,1)},9:{visible:!0,color:new c.Vector4(0,0,1,1)},12:{visible:!0,color:new c.Vector4(1,1,0,1)},DEFAULT:{visible:!0,color:new c.Vector4(.3,.6,.6,1)}},_=[[0,new c.Color(0,0,0)],[1,new c.Color(1,1,1)]],b=[[0,new c.Color(.077,.042,.206)],[.1,new c.Color(.225,.036,.388)],[.2,new c.Color(.373,.074,.432)],[.3,new c.Color(.522,.128,.42)],[.4,new c.Color(.665,.182,.37)],[.5,new c.Color(.797,.255,.287)],[.6,new c.Color(.902,.364,.184)],[.7,new c.Color(.969,.516,.063)],[.8,new c.Color(.988,.683,.072)],[.9,new c.Color(.961,.859,.298)],[1,new c.Color(.988,.998,.645)]],T=[[0,new c.Color(.241,.015,.61)],[.1,new c.Color(.387,.001,.654)],[.2,new c.Color(.524,.025,.653)],[.3,new c.Color(.651,.125,.596)],[.4,new c.Color(.752,.227,.513)],[.5,new c.Color(.837,.329,.431)],[.6,new c.Color(.907,.435,.353)],[.7,new c.Color(.963,.554,.272)],[.8,new c.Color(.992,.681,.195)],[.9,new c.Color(.987,.822,.144)],[1,new c.Color(.94,.975,.131)]],A=[[0,new c.Color(.278,0,.714)],[1/6,new c.Color(0,0,1)],[2/6,new c.Color(0,1,1)],[.5,new c.Color(0,1,0)],[4/6,new c.Color(1,1,0)],[5/6,new c.Color(1,.64,0)],[1,new c.Color(1,0,0)]],w=[[0,new c.Color(.3686,.3098,.6353)],[.1,new c.Color(.1961,.5333,.7412)],[.2,new c.Color(.4,.7608,.6471)],[.3,new c.Color(.6706,.8667,.6431)],[.4,new c.Color(.902,.9608,.5961)],[.5,new c.Color(1,1,.749)],[.6,new c.Color(.9961,.8784,.5451)],[.7,new c.Color(.9922,.6824,.3804)],[.8,new c.Color(.9569,.4275,.2627)],[.9,new c.Color(.8353,.2431,.3098)],[1,new c.Color(.6196,.0039,.2588)]],C=[[0,new c.Color(.267,.005,.329)],[.1,new c.Color(.283,.141,.458)],[.2,new c.Color(.254,.265,.53)],[.3,new c.Color(.207,.372,.553)],[.4,new c.Color(.164,.471,.558)],[.5,new c.Color(.128,.567,.551)],[.6,new c.Color(.135,.659,.518)],[.7,new c.Color(.267,.749,.441)],[.8,new c.Color(.478,.821,.318)],[.9,new c.Color(.741,.873,.15)],[1,new c.Color(.993,.906,.144)]],I=[[0,new c.Color(.1647,.2824,.3451)],[.1,new c.Color(.1338,.3555,.4227)],[.2,new c.Color(.061,.4319,.4864)],[.3,new c.Color(0,.5099,.5319)],[.4,new c.Color(0,.5881,.5569)],[.5,new c.Color(.137,.665,.5614)],[.6,new c.Color(.2906,.7395,.5477)],[.7,new c.Color(.4453,.8099,.5201)],[.8,new c.Color(.6102,.8748,.485)],[.9,new c.Color(.7883,.9323,.4514)],[1,new c.Color(.9804,.9804,.4314)]];function N(t,e,n){const i=t*e,o=new Uint8Array(4*i),r=Math.floor(255*n.r),s=Math.floor(255*n.g),a=Math.floor(255*n.b);for(let t=0;t<i;t++)o[3*t]=r,o[3*t+1]=s,o[3*t+2]=a;const l=new c.DataTexture(o,t,e,c.RGBAFormat);return l.needsUpdate=!0,l.magFilter=c.NearestFilter,l}function S(t){const e=document.createElement("canvas");e.width=64,e.height=64;const n=e.getContext("2d");n.rect(0,0,64,64);const i=n.createLinearGradient(0,0,64,64);for(let e=0;e<t.length;e++){const n=t[e];i.addColorStop(n[0],"#"+n[1].getHexString())}n.fillStyle=i,n.fill();const o=new c.CanvasTexture(e);return o.needsUpdate=!0,o.minFilter=c.LinearFilter,o}function O(t){const e=new Uint8Array(262144);for(let n=0;n<256;n++)for(let i=0;i<256;i++){const o=n+256*i;let r,s=!0;t[n]?(r=t[n].color,s=t[n].visible):t[n%32]?(r=t[n%32].color,s=t[n%32].visible):(r=t.DEFAULT.color,s=t.DEFAULT.visible),e[4*o+0]=255*r.x,e[4*o+1]=255*r.y,e[4*o+2]=255*r.z,e[4*o+3]=s?255*r.w:0}const n=new c.DataTexture(e,256,256,c.RGBAFormat);return n.magFilter=c.NearestFilter,n.needsUpdate=!0,n}var P=function(t,e,n,i){var o,r=arguments.length,s=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(s=(r<3?o(s):r>3?o(e,n,s):o(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s};const M={[s.OCTREE]:"tree_type_octree",[s.KDTREE]:"tree_type_kdtree"},E={[o.FIXED]:"fixed_point_size",[o.ATTENUATED]:"attenuated_point_size",[o.ADAPTIVE]:"adaptive_point_size"},D={[a.ATTENUATED]:"attenuated_opacity",[a.FIXED]:"fixed_opacity"},L={[r.SQUARE]:"square_point_shape",[r.CIRCLE]:"circle_point_shape",[r.PARABOLOID]:"paraboloid_point_shape"},B={[l.RGB]:"color_type_rgb",[l.COLOR]:"color_type_color",[l.DEPTH]:"color_type_depth",[l.HEIGHT]:"color_type_height",[l.INTENSITY]:"color_type_intensity",[l.INTENSITY_GRADIENT]:"color_type_intensity_gradient",[l.LOD]:"color_type_lod",[l.POINT_INDEX]:"color_type_point_index",[l.CLASSIFICATION]:"color_type_classification",[l.RETURN_NUMBER]:"color_type_return_number",[l.SOURCE]:"color_type_source",[l.NORMAL]:"color_type_normal",[l.PHONG]:"color_type_phong",[l.RGB_HEIGHT]:"color_type_rgb_height",[l.COMPOSITE]:"color_type_composite"},R={[i.DISABLED]:"clip_disabled",[i.CLIP_OUTSIDE]:"clip_outside",[i.HIGHLIGHT_INSIDE]:"clip_highlight_inside",[i.CLIP_HORIZONTALLY]:"clip_horizontally",[i.CLIP_VERTICALLY]:"clip_vertically"};class z extends c.RawShaderMaterial{constructor(t={}){super(),this.useDrawingBufferSize=!1,this.lights=!1,this.fog=!1,this.numClipBoxes=0,this.clipBoxes=[],this.visibleNodeTextureOffsets=new Map,this._gradient=w,this.gradientTexture=S(this._gradient),this._classification=y,this.classificationTexture=O(this._classification),this.uniforms={bbSize:F("fv",[0,0,0]),blendDepthSupplement:F("f",0),blendHardness:F("f",2),classificationLUT:F("t",this.classificationTexture||new c.Texture),clipBoxCount:F("f",0),clipBoxes:F("Matrix4fv",[]),clipExtent:F("fv",[0,0,1,1]),depthMap:F("t",null),diffuse:F("fv",[1,1,1]),fov:F("f",1),gradient:F("t",this.gradientTexture||new c.Texture),heightMax:F("f",1),heightMin:F("f",0),intensityBrightness:F("f",0),intensityContrast:F("f",0),intensityGamma:F("f",1),intensityRange:F("fv",[0,65e3]),isLeafNode:F("b",0),level:F("f",0),maxSize:F("f",50),minSize:F("f",2),octreeSize:F("f",0),opacity:F("f",1),pcIndex:F("f",0),rgbBrightness:F("f",0),rgbContrast:F("f",0),rgbGamma:F("f",1),screenHeight:F("f",1),screenWidth:F("f",1),size:F("f",1),spacing:F("f",1),toModel:F("Matrix4f",[]),transition:F("f",.5),uColor:F("c",new c.Color(16777215)),visibleNodes:F("t",this.visibleNodesTexture||new c.Texture),vnStart:F("f",0),wClassification:F("f",0),wElevation:F("f",0),wIntensity:F("f",0),wReturnNumber:F("f",0),wRGB:F("f",1),wSourceID:F("f",0),opacityAttenuation:F("f",1),filterByNormalThreshold:F("f",0),highlightedPointCoordinate:F("fv",new c.Vector3),highlightedPointColor:F("fv",p.clone()),enablePointHighlighting:F("b",!0),highlightedPointScale:F("f",2),backgroundMap:F("t",null),normalFilteringMode:F("i",d.ABSOLUTE_NORMAL_FILTERING_MODE),pointCloudID:F("f",2),pointCloudMixingMode:F("i",u.CHECKBOARD),stripeDistanceX:F("f",5),stripeDistanceY:F("f",5),stripeDivisorX:F("f",2),stripeDivisorY:F("f",2),pointCloudMixAngle:F("f",31)},this.useClipBox=!1,this.weighted=!1,this.pointColorType=l.RGB,this.pointSizeType=o.ADAPTIVE,this.clipMode=i.DISABLED,this.useEDL=!1,this.shape=r.SQUARE,this.treeType=s.OCTREE,this.pointOpacityType=a.FIXED,this.useFilterByNormal=!1,this.useTextureBlending=!1,this.usePointCloudMixing=!1,this.highlightPoint=!1,this.attributes={position:{type:"fv",value:[]},color:{type:"fv",value:[]},normal:{type:"fv",value:[]},intensity:{type:"f",value:[]},classification:{type:"f",value:[]},returnNumber:{type:"f",value:[]},numberOfReturns:{type:"f",value:[]},pointSourceID:{type:"f",value:[]},indices:{type:"fv",value:[]}};const e=this.visibleNodesTexture=N(2048,1,new c.Color(16777215));e.minFilter=c.NearestFilter,e.magFilter=c.NearestFilter,this.setUniform("visibleNodes",e),this.treeType=G(t.treeType,s.OCTREE),this.size=G(t.size,1),this.minSize=G(t.minSize,2),this.maxSize=G(t.maxSize,50),this.classification=y,this.defaultAttributeValues.normal=[0,0,0],this.defaultAttributeValues.classification=[0,0,0],this.defaultAttributeValues.indices=[0,0,0,0],this.vertexColors=!0,this.updateShaderSource()}dispose(){super.dispose(),this.gradientTexture&&(this.gradientTexture.dispose(),this.gradientTexture=void 0),this.visibleNodesTexture&&(this.visibleNodesTexture.dispose(),this.visibleNodesTexture=void 0),this.clearVisibleNodeTextureOffsets(),this.classificationTexture&&(this.classificationTexture.dispose(),this.classificationTexture=void 0),this.depthMap&&(this.depthMap.dispose(),this.depthMap=void 0),this.backgroundMap&&(this.backgroundMap.dispose(),this.backgroundMap=void 0)}clearVisibleNodeTextureOffsets(){this.visibleNodeTextureOffsets.clear()}updateShaderSource(){this.vertexShader=this.applyDefines(n(4).default),this.fragmentShader=this.applyDefines(n(5).default),1===this.opacity?(this.blending=c.NoBlending,this.transparent=!1,this.depthTest=!0,this.depthWrite=!0,this.depthFunc=c.LessEqualDepth):this.opacity<1&&!this.useEDL&&(this.blending=c.AdditiveBlending,this.transparent=!0,this.depthTest=!1,this.depthWrite=!0),this.weighted&&(this.blending=c.AdditiveBlending,this.transparent=!0,this.depthTest=!0,this.depthWrite=!1,this.depthFunc=c.LessEqualDepth),this.needsUpdate=!0}applyDefines(t){const e=[];function n(t){t&&e.push("#define "+t)}return n(M[this.treeType]),n(E[this.pointSizeType]),n(L[this.shape]),n(B[this.pointColorType]),n(R[this.clipMode]),n(D[this.pointOpacityType]),1===this.rgbGamma&&0===this.rgbBrightness&&0===this.rgbContrast||n("use_rgb_gamma_contrast_brightness"),this.useFilterByNormal&&n("use_filter_by_normal"),this.useEDL&&n("use_edl"),this.weighted&&n("weighted_splats"),this.numClipBoxes>0&&n("use_clip_box"),this.highlightPoint&&n("highlight_point"),this.useTextureBlending&&n("use_texture_blending"),this.usePointCloudMixing&&n("use_point_cloud_mixing"),n("MAX_POINT_LIGHTS 0"),n("MAX_DIR_LIGHTS 0"),e.push(t),e.join("\n")}setPointCloudMixingMode(t){this.pointCloudMixingMode=t}getPointCloudMixingMode(){return this.pointCloudMixingMode===u.STRIPES?u.STRIPES:u.CHECKBOARD}setClipBoxes(t){if(!t)return;this.clipBoxes=t;const e=this.numClipBoxes!==t.length&&(0===t.length||0===this.numClipBoxes);this.numClipBoxes=t.length,this.setUniform("clipBoxCount",this.numClipBoxes),e&&this.updateShaderSource();const n=16*this.numClipBoxes,i=new Float32Array(n);for(let e=0;e<this.numClipBoxes;e++)i.set(t[e].inverse.elements,16*e);for(let t=0;t<n;t++)isNaN(i[t])&&(i[t]=1/0);this.setUniform("clipBoxes",i)}get gradient(){return this._gradient}set gradient(t){this._gradient!==t&&(this._gradient=t,this.gradientTexture=S(this._gradient),this.setUniform("gradient",this.gradientTexture))}get classification(){return this._classification}set classification(t){const e=Object.assign({},t);let n=!1;if(this._classification){n=Object.keys(e).length===Object.keys(this._classification).length;for(const t of Object.keys(e))n=n&&this._classification[t]===e[t]}n||(console.log("classification is not equal"),this._classification=e,this.recomputeClassification())}recomputeClassification(){this.classificationTexture=O(this._classification),this.setUniform("classificationLUT",this.classificationTexture)}get elevationRange(){return[this.heightMin,this.heightMax]}set elevationRange(t){this.heightMin=t[0],this.heightMax=t[1]}getUniform(t){return void 0===this.uniforms?void 0:this.uniforms[t].value}setUniform(t,e){if(void 0===this.uniforms)return;const n=this.uniforms[t];"c"===n.type?n.value.copy(e):e!==n.value&&(n.value=e)}updateMaterial(t,e,n,i){const r=i.getPixelRatio();"PerspectiveCamera"===n.type?this.fov=n.fov*(Math.PI/180):this.fov=Math.PI/2;const s=i.getRenderTarget();null!==s?(this.screenWidth=s.width,this.screenHeight=s.height):(this.screenWidth=i.domElement.clientWidth*r,this.screenHeight=i.domElement.clientHeight*r),this.useDrawingBufferSize&&(i.getDrawingBufferSize(z.helperVec2),this.screenWidth=z.helperVec2.width,this.screenHeight=z.helperVec2.height);const a=Math.max(t.scale.x,t.scale.y,t.scale.z);this.spacing=t.pcoGeometry.spacing*a,this.octreeSize=t.pcoGeometry.boundingBox.getSize(z.helperVec3).x,this.pointSizeType!==o.ADAPTIVE&&this.pointColorType!==l.LOD||this.updateVisibilityTextureData(e)}updateVisibilityTextureData(t){t.sort(m);const e=new Uint8Array(4*t.length),n=new Array(t.length).fill(1/0);this.visibleNodeTextureOffsets.clear();for(let i=0;i<t.length;i++){const o=t[i];if(this.visibleNodeTextureOffsets.set(o.name,i),i>0){const t=o.name.slice(0,-1),r=this.visibleNodeTextureOffsets.get(t),s=i-r;n[r]=Math.min(n[r],s);const a=4*r;e[a]=e[a]|1<<o.index,e[a+1]=n[r]>>8,e[a+2]=n[r]%256}e[4*i+3]=o.name.length}const i=this.visibleNodesTexture;i&&(i.image.data.set(e),i.needsUpdate=!0)}static makeOnBeforeRender(t,e,n){return(i,o,r,s,a)=>{const l=a,d=l.uniforms;d.level.value=e.level,d.isLeafNode.value=e.isLeafNode;const u=l.visibleNodeTextureOffsets.get(e.name);void 0!==u&&(d.vnStart.value=u),d.pcIndex.value=void 0!==n?n:t.visibleNodes.indexOf(e),a.uniformsNeedUpdate=!0}}}function F(t,e){return{type:t,value:e}}function G(t,e){return void 0===t?e:t}function U(t,e=!1){return(n,i)=>{Object.defineProperty(n,i,{get(){return this.getUniform(t)},set(n){n!==this.getUniform(t)&&(this.setUniform(t,n),e&&this.updateShaderSource())}})}}function H(){return(t,e)=>{const n="_"+e.toString();Object.defineProperty(t,e,{get(){return this[n]},set(t){t!==this[n]&&(this[n]=t,this.updateShaderSource())}})}}var V;z.helperVec3=new c.Vector3,z.helperVec2=new c.Vector2,P([U("bbSize")],z.prototype,"bbSize",void 0),P([U("clipExtent")],z.prototype,"clipExtent",void 0),P([U("depthMap")],z.prototype,"depthMap",void 0),P([U("fov")],z.prototype,"fov",void 0),P([U("heightMax")],z.prototype,"heightMax",void 0),P([U("heightMin")],z.prototype,"heightMin",void 0),P([U("intensityBrightness")],z.prototype,"intensityBrightness",void 0),P([U("intensityContrast")],z.prototype,"intensityContrast",void 0),P([U("intensityGamma")],z.prototype,"intensityGamma",void 0),P([U("intensityRange")],z.prototype,"intensityRange",void 0),P([U("maxSize")],z.prototype,"maxSize",void 0),P([U("minSize")],z.prototype,"minSize",void 0),P([U("octreeSize")],z.prototype,"octreeSize",void 0),P([U("opacity",!0)],z.prototype,"opacity",void 0),P([U("rgbBrightness",!0)],z.prototype,"rgbBrightness",void 0),P([U("rgbContrast",!0)],z.prototype,"rgbContrast",void 0),P([U("rgbGamma",!0)],z.prototype,"rgbGamma",void 0),P([U("screenHeight")],z.prototype,"screenHeight",void 0),P([U("screenWidth")],z.prototype,"screenWidth",void 0),P([U("size")],z.prototype,"size",void 0),P([U("spacing")],z.prototype,"spacing",void 0),P([U("transition")],z.prototype,"transition",void 0),P([U("uColor")],z.prototype,"color",void 0),P([U("wClassification")],z.prototype,"weightClassification",void 0),P([U("wElevation")],z.prototype,"weightElevation",void 0),P([U("wIntensity")],z.prototype,"weightIntensity",void 0),P([U("wReturnNumber")],z.prototype,"weightReturnNumber",void 0),P([U("wRGB")],z.prototype,"weightRGB",void 0),P([U("wSourceID")],z.prototype,"weightSourceID",void 0),P([U("opacityAttenuation")],z.prototype,"opacityAttenuation",void 0),P([U("filterByNormalThreshold")],z.prototype,"filterByNormalThreshold",void 0),P([U("highlightedPointCoordinate")],z.prototype,"highlightedPointCoordinate",void 0),P([U("highlightedPointColor")],z.prototype,"highlightedPointColor",void 0),P([U("enablePointHighlighting")],z.prototype,"enablePointHighlighting",void 0),P([U("highlightedPointScale")],z.prototype,"highlightedPointScale",void 0),P([U("normalFilteringMode")],z.prototype,"normalFilteringMode",void 0),P([U("backgroundMap")],z.prototype,"backgroundMap",void 0),P([U("pointCloudID")],z.prototype,"pointCloudID",void 0),P([U("pointCloudMixingMode")],z.prototype,"pointCloudMixingMode",void 0),P([U("stripeDistanceX")],z.prototype,"stripeDistanceX",void 0),P([U("stripeDistanceY")],z.prototype,"stripeDistanceY",void 0),P([U("stripeDivisorX")],z.prototype,"stripeDivisorX",void 0),P([U("stripeDivisorY")],z.prototype,"stripeDivisorY",void 0),P([U("pointCloudMixAngle")],z.prototype,"pointCloudMixAngle",void 0),P([H()],z.prototype,"useClipBox",void 0),P([H()],z.prototype,"weighted",void 0),P([H()],z.prototype,"pointColorType",void 0),P([H()],z.prototype,"pointSizeType",void 0),P([H()],z.prototype,"clipMode",void 0),P([H()],z.prototype,"useEDL",void 0),P([H()],z.prototype,"shape",void 0),P([H()],z.prototype,"treeType",void 0),P([H()],z.prototype,"pointOpacityType",void 0),P([H()],z.prototype,"useFilterByNormal",void 0),P([H()],z.prototype,"useTextureBlending",void 0),P([H()],z.prototype,"usePointCloudMixing",void 0),P([H()],z.prototype,"highlightPoint",void 0),function(t){t[t.POSITION_CARTESIAN=0]="POSITION_CARTESIAN",t[t.COLOR_PACKED=1]="COLOR_PACKED",t[t.COLOR_FLOATS_1=2]="COLOR_FLOATS_1",t[t.COLOR_FLOATS_255=3]="COLOR_FLOATS_255",t[t.NORMAL_FLOATS=4]="NORMAL_FLOATS",t[t.FILLER=5]="FILLER",t[t.INTENSITY=6]="INTENSITY",t[t.CLASSIFICATION=7]="CLASSIFICATION",t[t.NORMAL_SPHEREMAPPED=8]="NORMAL_SPHEREMAPPED",t[t.NORMAL_OCT16=9]="NORMAL_OCT16",t[t.NORMAL=10]="NORMAL"}(V||(V={}));const k={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}};function W(t,e,n){return{name:t,type:e,numElements:n,byteSize:n*e.size}}const j=W(V.COLOR_PACKED,k.DATA_TYPE_INT8,4),Y={POSITION_CARTESIAN:W(V.POSITION_CARTESIAN,k.DATA_TYPE_FLOAT,3),RGBA_PACKED:j,COLOR_PACKED:j,RGB_PACKED:W(V.COLOR_PACKED,k.DATA_TYPE_INT8,3),NORMAL_FLOATS:W(V.NORMAL_FLOATS,k.DATA_TYPE_FLOAT,3),FILLER_1B:W(V.FILLER,k.DATA_TYPE_UINT8,1),INTENSITY:W(V.INTENSITY,k.DATA_TYPE_UINT16,1),CLASSIFICATION:W(V.CLASSIFICATION,k.DATA_TYPE_UINT8,1),NORMAL_SPHEREMAPPED:W(V.NORMAL_SPHEREMAPPED,k.DATA_TYPE_UINT8,2),NORMAL_OCT16:W(V.NORMAL_OCT16,k.DATA_TYPE_UINT8,2),NORMAL:W(V.NORMAL,k.DATA_TYPE_FLOAT,3)};class X{constructor(t=[]){this.attributes=[],this.byteSize=0,this.size=0;for(let e=0;e<t.length;e++){const n=t[e],i=Y[n];this.attributes.push(i),this.byteSize+=i.byteSize,this.size++}}add(t){this.attributes.push(t),this.byteSize+=t.byteSize,this.size++}hasColors(){return void 0!==this.attributes.find(K)}hasNormals(){return void 0!==this.attributes.find(q)}}function K({name:t}){return t===V.COLOR_PACKED}function q({name:t}){return t===V.NORMAL_SPHEREMAPPED||t===V.NORMAL_FLOATS||t===V.NORMAL||t===V.NORMAL_OCT16}function Q(t,e){return(new c.Box3).setFromPoints([new c.Vector3(t.min.x,t.min.y,t.min.z).applyMatrix4(e),new c.Vector3(t.min.x,t.min.y,t.min.z).applyMatrix4(e),new c.Vector3(t.max.x,t.min.y,t.min.z).applyMatrix4(e),new c.Vector3(t.min.x,t.max.y,t.min.z).applyMatrix4(e),new c.Vector3(t.min.x,t.min.y,t.max.z).applyMatrix4(e),new c.Vector3(t.min.x,t.max.y,t.max.z).applyMatrix4(e),new c.Vector3(t.max.x,t.max.y,t.min.z).applyMatrix4(e),new c.Vector3(t.max.x,t.min.y,t.max.z).applyMatrix4(e),new c.Vector3(t.max.x,t.max.y,t.max.z).applyMatrix4(e)])}function Z(t,e){const n=t.min.clone(),i=t.max.clone(),o=(new c.Vector3).subVectors(i,n);return(1&e)>0?n.z+=o.z/2:i.z-=o.z/2,(2&e)>0?n.y+=o.y/2:i.y-=o.y/2,(4&e)>0?n.x+=o.x/2:i.x-=o.x/2,new c.Box3(n,i)}class $ extends c.EventDispatcher{constructor(t,e,n){super(),this.id=$.idCount++,this.level=0,this.spacing=0,this.hasChildren=!1,this.children=[null,null,null,null,null,null,null,null],this.mean=new c.Vector3,this.numPoints=0,this.loaded=!1,this.loading=!1,this.failed=!1,this.parent=null,this.oneTimeDisposeHandlers=[],this.isLeafNode=!0,this.isTreeNode=!1,this.isGeometryNode=!0,this.name=t,this.index=g(t),this.pcoGeometry=e,this.boundingBox=n,this.tightBoundingBox=n.clone(),this.boundingSphere=n.getBoundingSphere(new c.Sphere)}dispose(){this.geometry&&this.parent&&(this.geometry.dispose(),this.geometry=void 0,this.loaded=!1,this.oneTimeDisposeHandlers.forEach(t=>t()),this.oneTimeDisposeHandlers=[])}getUrl(){const t=this.pcoGeometry,e=t.loader.version,n=[t.octreeDir];return t.loader&&e.equalOrHigher("1.5")?(n.push(this.getHierarchyBaseUrl()),n.push(this.name)):(e.equalOrHigher("1.4")||e.upTo("1.3"))&&n.push(this.name),n.join("/")}getHierarchyUrl(){return`${this.pcoGeometry.octreeDir}/${this.getHierarchyBaseUrl()}/${this.name}.hrc`}addChild(t){this.children[t.index]=t,this.isLeafNode=!1,t.parent=this}traverse(t,e=!0){const n=e?[this]:[];let i;for(;void 0!==(i=n.pop());){t(i);for(const t of i.children)null!==t&&n.push(t)}}load(){if(!this.canLoad())return Promise.resolve();let t;return this.loading=!0,this.pcoGeometry.numNodesLoading++,this.pcoGeometry.needsUpdate=!0,t=this.pcoGeometry.loader.version.equalOrHigher("1.5")&&this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierachyThenPoints():this.loadPoints(),t.catch(t=>{throw this.loading=!1,this.failed=!0,this.pcoGeometry.numNodesLoading--,t})}canLoad(){return!this.loading&&!this.loaded&&!this.pcoGeometry.disposed&&!this.pcoGeometry.loader.disposed&&this.pcoGeometry.numNodesLoading<this.pcoGeometry.maxNumNodesLoading}loadPoints(){return this.pcoGeometry.needsUpdate=!0,this.pcoGeometry.loader.load(this)}loadHierachyThenPoints(){return this.level%this.pcoGeometry.hierarchyStepSize!=0?Promise.resolve():Promise.resolve(this.pcoGeometry.loader.getUrl(this.getHierarchyUrl())).then(t=>this.pcoGeometry.xhrRequest(t,{mode:"cors"})).then(t=>v(t)).then(t=>t.arrayBuffer()).then(t=>x(t)).then(t=>this.loadHierarchy(this,t))}getHierarchyBaseUrl(){const t=this.pcoGeometry.hierarchyStepSize,e=this.name.substr(1),n=Math.floor(e.length/t);let i="r/";for(let o=0;o<n;o++)i+=e.substr(o*t,t)+"/";return i.slice(0,-1)}loadHierarchy(t,e){const n=new DataView(e),i=this.getNodeData(t.name,0,n);t.numPoints=i.numPoints;const o=[i],r=[];let s=5;for(;o.length>0;){const t=o.shift();let i=1;for(let a=0;a<8&&s+1<e.byteLength;a++){if(0!=(t.children&i)){const e=this.getNodeData(t.name+a,s,n);r.push(e),o.push(e),s+=5}i*=2}}t.pcoGeometry.needsUpdate=!0;const a=new Map;a.set(t.name,t),r.forEach(e=>this.addNode(e,t.pcoGeometry,a)),t.loadPoints()}getNodeData(t,e,n){return{children:n.getUint8(e),numPoints:n.getUint32(e+1,!0),name:t}}addNode({name:t,numPoints:e,children:n},i,o){const r=g(t),s=t.substring(0,t.length-1),a=o.get(s),l=t.length-1,d=Z(a.boundingBox,r),u=new $(t,i,d);u.level=l,u.numPoints=e,u.hasChildren=n>0,u.spacing=i.spacing/Math.pow(2,l),a.addChild(u),o.set(t,u)}}$.idCount=0;class J{constructor(t,e,n,i,o){this.loader=t,this.boundingBox=e,this.tightBoundingBox=n,this.offset=i,this.xhrRequest=o,this.disposed=!1,this.needsUpdate=!0,this.octreeDir="",this.hierarchyStepSize=-1,this.nodes={},this.numNodesLoading=0,this.maxNumNodesLoading=3,this.spacing=0,this.pointAttributes=new X([]),this.projection=null,this.url=null}dispose(){this.loader.dispose(),this.root.traverse(t=>t.dispose()),this.disposed=!0}addNodeLoadedCallback(t){this.loader.callbacks.push(t)}clearNodeLoadedCallbacks(){this.loader.callbacks=[]}}class tt extends c.EventDispatcher{constructor(t,e){super(),this.pcIndex=void 0,this.boundingBoxNode=null,this.loaded=!0,this.isTreeNode=!0,this.isGeometryNode=!1,this.geometryNode=t,this.sceneNode=e,this.children=t.children.slice()}dispose(){this.geometryNode.dispose()}disposeSceneNode(){const t=this.sceneNode;if(t.geometry instanceof c.BufferGeometry){const e=t.geometry.attributes;for(const t in e)"position"===t&&delete e[t].array,delete e[t];t.geometry.dispose(),t.geometry=void 0}}traverse(t,e){this.geometryNode.traverse(t,e)}get id(){return this.geometryNode.id}get name(){return this.geometryNode.name}get level(){return this.geometryNode.level}get isLeafNode(){return this.geometryNode.isLeafNode}get numPoints(){return this.geometryNode.numPoints}get index(){return this.geometryNode.index}get boundingSphere(){return this.geometryNode.boundingSphere}get boundingBox(){return this.geometryNode.boundingBox}get spacing(){return this.geometryNode.spacing}}function et(t,e,n){return Math.min(Math.max(e,t),n)}class nt{dispose(){this.pickState&&(this.pickState.material.dispose(),this.pickState.renderTarget.dispose())}pick(t,e,n,i,o={}){if(0===i.length)return null;const r=this.pickState?this.pickState:this.pickState=nt.getPickState(),s=r.material,a=t.getPixelRatio(),l=Math.ceil(t.domElement.clientWidth*a),d=Math.ceil(t.domElement.clientHeight*a);nt.updatePickRenderTarget(this.pickState,l,d);const u=nt.helperVec3;o.pixelPosition?u.copy(o.pixelPosition):(u.addVectors(e.position,n.direction).project(e),u.x=(u.x+1)*l*.5,u.y=(u.y+1)*d*.5);const c=Math.floor((o.pickWindowSize||15)*a),h=(c-1)/2,f=Math.floor(et(u.x-h,0,l)),p=Math.floor(et(u.y-h,0,d));nt.prepareRender(t,f,p,c,s,r);const g=nt.render(t,e,s,i,n,r,o);s.clearVisibleNodeTextureOffsets();const m=nt.readPixels(t,f,p,c),v=nt.findHit(m,c);return nt.getPickPoint(v,g)}static prepareRender(t,e,n,i,o,r){t.setScissor(e,n,i,i),t.setScissorTest(!0),t.state.buffers.depth.setTest(o.depthTest),t.state.buffers.depth.setMask(o.depthWrite),t.state.setBlending(c.NoBlending),t.setRenderTarget(r.renderTarget),t.getClearColor(this.clearColor);const s=t.getClearAlpha();t.setClearColor(f,0),t.clear(!0,!0,!0),t.setClearColor(this.clearColor,s)}static render(t,e,n,i,o,r,s){const a=[];for(const l of i){const i=nt.nodesOnRay(l,o);i.length&&(nt.updatePickMaterial(n,l.material,s),n.updateMaterial(l,i,e,t),s.onBeforePickRender&&s.onBeforePickRender(n,r.renderTarget),r.scene.children=nt.createTempNodes(l,i,n,a.length),t.render(r.scene,e),i.forEach(t=>a.push({node:t,octree:l})))}return a}static nodesOnRay(t,e){const n=[],i=e.clone();for(const e of t.visibleNodes){const o=nt.helperSphere.copy(e.boundingSphere).applyMatrix4(t.matrixWorld);i.intersectsSphere(o)&&n.push(e)}return n}static readPixels(t,e,n,i){const o=new Uint8Array(4*i*i);return t.readRenderTargetPixels(t.getRenderTarget(),e,n,i,i,o),t.setScissorTest(!1),t.setRenderTarget(null),o}static createTempNodes(t,e,n,i){const o=[];for(let r=0;r<e.length;r++){const s=e[r],a=s.sceneNode,l=new c.Points(a.geometry,n);l.matrix=a.matrix,l.matrixWorld=a.matrixWorld,l.matrixAutoUpdate=!1,l.frustumCulled=!1;const d=i+r+1;d>255&&console.error("More than 255 nodes for pick are not supported."),l.onBeforeRender=z.makeOnBeforeRender(t,s,d),o.push(l)}return o}static updatePickMaterial(t,e,n){t.pointSizeType=e.pointSizeType,t.shape=e.shape,t.size=e.size,t.minSize=e.minSize,t.maxSize=e.maxSize,t.classification=e.classification,t.useFilterByNormal=e.useFilterByNormal,t.filterByNormalThreshold=e.filterByNormalThreshold,n.pickOutsideClipRegion?t.clipMode=i.DISABLED:(t.clipMode=e.clipMode,t.setClipBoxes(e.clipMode===i.CLIP_OUTSIDE?e.clipBoxes:[]))}static updatePickRenderTarget(t,e,n){t.renderTarget.width===e&&t.renderTarget.height===n||(t.renderTarget.dispose(),t.renderTarget=nt.makePickRenderTarget(),t.renderTarget.setSize(e,n))}static makePickRenderTarget(){return new c.WebGLRenderTarget(1,1,{minFilter:c.LinearFilter,magFilter:c.NearestFilter,format:c.RGBAFormat})}static findHit(t,e){const n=new Uint32Array(t.buffer);let i=Number.MAX_VALUE,o=null;for(let r=0;r<e;r++)for(let s=0;s<e;s++){const a=r+s*e,l=Math.pow(r-(e-1)/2,2)+Math.pow(s-(e-1)/2,2),d=t[4*a+3];t[4*a+3]=0;const u=n[a];d>0&&l<i&&(o={pIndex:u,pcIndex:d-1},i=l)}return o}static getPickPoint(t,e){if(!t)return null;const n={},i=e[t.pcIndex]&&e[t.pcIndex].node.sceneNode;if(!i)return null;n.pointCloud=e[t.pcIndex].octree;const o=i.geometry.attributes;for(const e in o){if(!o.hasOwnProperty(e))continue;const r=o[e];if("position"===e)nt.addPositionToPickPoint(n,t,r,i);else if("normal"===e)nt.addNormalToPickPoint(n,t,r,i);else if("indices"===e);else if(1===r.itemSize)n[e]=r.array[t.pIndex];else{const i=[];for(let e=0;e<r.itemSize;e++)i.push(r.array[r.itemSize*t.pIndex+e]);n[e]=i}}return n}static addPositionToPickPoint(t,e,n,i){t.position=(new c.Vector3).fromBufferAttribute(n,e.pIndex).applyMatrix4(i.matrixWorld)}static addNormalToPickPoint(t,e,n,i){const o=(new c.Vector3).fromBufferAttribute(n,e.pIndex),r=new c.Vector4(o.x,o.y,o.z,0).applyMatrix4(i.matrixWorld);o.set(r.x,r.y,r.z),t.normal=o}static getPickState(){const t=new c.Scene;t.autoUpdate=!1;const e=new z;return e.pointColorType=l.POINT_INDEX,{renderTarget:nt.makePickRenderTarget(),material:e,scene:t}}}nt.helperVec3=new c.Vector3,nt.helperSphere=new c.Sphere,nt.clearColor=new c.Color;class it extends c.Object3D{constructor(){super(...arguments),this.root=null}initialized(){return null!==this.root}}class ot extends it{constructor(t,e,n){super(),this.disposed=!1,this.level=0,this.maxLevel=1/0,this.minNodePixelSize=50,this.root=null,this.boundingBoxNodes=[],this.visibleNodes=[],this.visibleGeometry=[],this.numVisiblePoints=0,this.showBoundingBox=!1,this.visibleBounds=new c.Box3,this.name="",this.potree=t,this.root=e.root,this.pcoGeometry=e,this.boundingBox=e.boundingBox,this.boundingSphere=this.boundingBox.getBoundingSphere(new c.Sphere),this.position.copy(e.offset),this.updateMatrix(),this.material=n||new z,this.initMaterial(this.material)}initMaterial(t){this.updateMatrixWorld(!0);const{min:e,max:n}=Q(this.pcoGeometry.tightBoundingBox||this.getBoundingBoxWorld(),this.matrixWorld),i=n.z-e.z;t.heightMin=e.z-.2*i,t.heightMax=n.z+.2*i}dispose(){this.root&&this.root.dispose(),this.pcoGeometry.root.traverse(t=>this.potree.lru.remove(t)),this.pcoGeometry.dispose(),this.material.dispose(),this.visibleNodes=[],this.visibleGeometry=[],this.picker&&(this.picker.dispose(),this.picker=void 0),this.disposed=!0}get pointSizeType(){return this.material.pointSizeType}set pointSizeType(t){this.material.pointSizeType=t}toTreeNode(t,e){const n=new c.Points(t.geometry,this.material),i=new tt(t,n);return n.name=t.name,n.position.copy(t.boundingBox.min),n.frustumCulled=!1,n.onBeforeRender=z.makeOnBeforeRender(this,i),e?(e.sceneNode.add(n),e.children[t.index]=i,t.oneTimeDisposeHandlers.push(()=>{i.disposeSceneNode(),e.sceneNode.remove(i.sceneNode),e.children[t.index]=t})):(this.root=i,this.add(n)),i}updateVisibleBounds(){const t=this.visibleBounds;t.min.set(1/0,1/0,1/0),t.max.set(-1/0,-1/0,-1/0);for(const e of this.visibleNodes)e.isLeafNode&&(t.expandByPoint(e.boundingBox.min),t.expandByPoint(e.boundingBox.max))}updateBoundingBoxes(){if(!this.showBoundingBox||!this.parent)return;let t=this.parent.getObjectByName("bbroot");t||(t=new c.Object3D,t.name="bbroot",this.parent.add(t));const e=[];for(const t of this.visibleNodes)void 0!==t.boundingBoxNode&&t.isLeafNode&&e.push(t.boundingBoxNode);t.children=e}updateMatrixWorld(t){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==t||(this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0)}hideDescendants(t){const e=[];for(n(t);e.length>0;){const t=e.shift();t.visible=!1,n(t)}function n(t){for(const n of t.children)n.visible&&e.push(n)}}moveToOrigin(){this.position.set(0,0,0),this.position.set(0,0,0).sub(this.getBoundingBoxWorld().getCenter(new c.Vector3))}moveToGroundPlane(){this.position.y+=-this.getBoundingBoxWorld().min.y}getBoundingBoxWorld(){return this.updateMatrixWorld(!0),Q(this.boundingBox,this.matrixWorld)}getVisibleExtent(){return this.visibleBounds.applyMatrix4(this.matrixWorld)}pick(t,e,n,i={}){return this.picker=this.picker||new nt,this.picker.pick(t,e,n,[this],i)}get progress(){return 0===this.visibleGeometry.length?0:this.visibleNodes.length/this.visibleGeometry.length}}const rt=document.createElement("canvas").getContext("webgl"),st={SHADER_INTERPOLATION:at("EXT_frag_depth")&&lt(8),SHADER_SPLATS:at("EXT_frag_depth")&&at("OES_texture_float")&&lt(8),SHADER_EDL:at("OES_texture_float")&&lt(8),precision:function(){if(null===rt)return"";const t=rt.getShaderPrecisionFormat(rt.VERTEX_SHADER,rt.HIGH_FLOAT),e=rt.getShaderPrecisionFormat(rt.VERTEX_SHADER,rt.MEDIUM_FLOAT),n=rt.getShaderPrecisionFormat(rt.FRAGMENT_SHADER,rt.HIGH_FLOAT),i=rt.getShaderPrecisionFormat(rt.FRAGMENT_SHADER,rt.MEDIUM_FLOAT),o=t&&n&&t.precision>0&&n.precision>0,r=e&&i&&e.precision>0&&i.precision>0;return o?"highp":r?"mediump":"lowp"}()};function at(t){return null!==rt&&Boolean(rt.getExtension(t))}function lt(t){return null!==rt&&rt.getParameter(rt.MAX_VARYING_VECTORS)>=t}class dt{constructor(){this.resolvers=[],this.promises=[]}enqueue(t){this.resolvers.length||this.add();this.resolvers.shift()(t)}dequeue(){return this.promises.length||this.add(),this.promises.shift()}add(){this.promises.push(new Promise(t=>{this.resolvers.push(t)}))}}class ut{constructor(t,e){this.wrappedWorker=t,this.maxIdle=e,this.timeoutId=void 0,this.terminated=!1}get worker(){return this.wrappedWorker}get isTerminated(){return this.terminated}markIdle(){this.timeoutId=window.setTimeout(()=>{this.terminated=!0,this.wrappedWorker.terminate()},this.maxIdle)}markInUse(){this.timeoutId&&window.clearTimeout(this.timeoutId)}}class ct{constructor(t,e){this.maxWorkers=t,this.workerType=e,this.pool=new dt,this.poolSize=0}getWorker(){return this.poolSize<this.maxWorkers?(this.poolSize++,Promise.resolve(new ut(new this.workerType,ct.POOL_MAX_IDLE))):this.pool.dequeue().then(t=>(t.markInUse(),t.isTerminated?(this.poolSize--,this.getWorker()):t))}releaseWorker(t){t.markIdle(),this.pool.enqueue(t)}}ct.POOL_MAX_IDLE=7e3;class ht{constructor(t){this.versionMinor=0,this.version=t;const e=-1===t.indexOf(".")?t.length:t.indexOf(".");this.versionMajor=parseInt(t.substr(0,e),10),this.versionMinor=parseInt(t.substr(e+1),10),isNaN(this.versionMinor)&&(this.versionMinor=0)}newerThan(t){const e=new ht(t);return this.versionMajor>e.versionMajor||this.versionMajor===e.versionMajor&&this.versionMinor>e.versionMinor}equalOrHigher(t){const e=new ht(t);return this.versionMajor>e.versionMajor||this.versionMajor===e.versionMajor&&this.versionMinor>=e.versionMinor}upTo(t){return!this.newerThan(t)}}class ft{constructor({getUrl:t=(t=>Promise.resolve(t)),version:e,boundingBox:n,scale:i,xhrRequest:o}){this.disposed=!1,this.version="string"==typeof e?new ht(e):e,this.xhrRequest=o,this.getUrl=t,this.boundingBox=n,this.scale=i,this.callbacks=[]}dispose(){this.disposed=!0}load(t){return t.loaded||this.disposed?Promise.resolve():Promise.resolve(this.getUrl(this.getNodeUrl(t))).then(t=>this.xhrRequest(t,{mode:"cors"})).then(t=>v(t)).then(t=>t.arrayBuffer()).then(t=>x(t)).then(e=>new Promise(n=>this.parse(t,e,n)))}getNodeUrl(t){let e=t.getUrl();return this.version.equalOrHigher("1.4")&&(e+=".bin"),e}parse(t,e,n){this.disposed?n():ft.WORKER_POOL.getWorker().then(i=>{const o=t.pcoGeometry.pointAttributes,r=e.byteLength/o.byteSize;this.version.upTo("1.5")&&(t.numPoints=r),i.worker.onmessage=e=>{if(this.disposed)return n(),void ft.WORKER_POOL.releaseWorker(i);const o=e.data,s=t.geometry=t.geometry||new c.BufferGeometry;s.boundingBox=t.boundingBox,this.addBufferAttributes(s,o.attributeBuffers),this.addIndices(s,o.indices),this.addNormalAttribute(s,r),t.mean=(new c.Vector3).fromArray(o.mean),t.tightBoundingBox=this.getTightBoundingBox(o.tightBoundingBox),t.loaded=!0,t.loading=!1,t.failed=!1,t.pcoGeometry.numNodesLoading--,t.pcoGeometry.needsUpdate=!0,this.callbacks.forEach(e=>e(t)),n(),ft.WORKER_POOL.releaseWorker(i)};const s={buffer:e,pointAttributes:o,version:this.version.version,min:t.boundingBox.min.toArray(),offset:t.pcoGeometry.offset.toArray(),scale:this.scale,spacing:t.spacing,hasChildren:t.hasChildren};i.worker.postMessage(s,[s.buffer])})}getTightBoundingBox({min:t,max:e}){const n=new c.Box3((new c.Vector3).fromArray(t),(new c.Vector3).fromArray(e));return n.max.sub(n.min),n.min.set(0,0,0),n}addBufferAttributes(t,e){Object.keys(e).forEach(n=>{const i=e[n].buffer;this.isAttribute(n,V.POSITION_CARTESIAN)?t.setAttribute("position",new c.BufferAttribute(new Float32Array(i),3)):this.isAttribute(n,V.COLOR_PACKED)?t.setAttribute("color",new c.BufferAttribute(new Uint8Array(i),3,!0)):this.isAttribute(n,V.INTENSITY)?t.setAttribute("intensity",new c.BufferAttribute(new Float32Array(i),1)):this.isAttribute(n,V.CLASSIFICATION)?t.setAttribute("classification",new c.BufferAttribute(new Uint8Array(i),1)):(this.isAttribute(n,V.NORMAL_SPHEREMAPPED)||this.isAttribute(n,V.NORMAL_OCT16)||this.isAttribute(n,V.NORMAL))&&t.setAttribute("normal",new c.BufferAttribute(new Float32Array(i),3))})}addIndices(t,e){const n=new c.Uint8BufferAttribute(e,4);n.normalized=!0,t.setAttribute("indices",n)}addNormalAttribute(t,e){if(!t.getAttribute("normal")){const n=new Float32Array(3*e);t.setAttribute("normal",new c.BufferAttribute(new Float32Array(n),3))}}isAttribute(t,e){return parseInt(t,10)===e}}function pt(t,e,n){return Promise.resolve(e(t)).then(t=>n(t,{mode:"cors"}).then(t=>v(t)).then(t=>t.json()).then(function(t,e,n){return i=>{const{offset:o,boundingBox:r,tightBoundingBox:s}=function(t){const e=new c.Vector3(t.boundingBox.lx,t.boundingBox.ly,t.boundingBox.lz),n=new c.Vector3(t.boundingBox.ux,t.boundingBox.uy,t.boundingBox.uz),i=new c.Box3(e,n),o=i.clone(),r=e.clone();if(t.tightBoundingBox){const{lx:e,ly:n,lz:i,ux:r,uy:s,uz:a}=t.tightBoundingBox;o.min.set(e,n,i),o.max.set(r,s,a)}return i.min.sub(r),i.max.sub(r),o.min.sub(r),o.max.sub(r),{offset:r,boundingBox:i,tightBoundingBox:o}}(i),a=new ft({getUrl:e,version:i.version,boundingBox:r,scale:i.scale,xhrRequest:n}),l=new J(a,r,s,o,n);l.url=t,l.octreeDir=i.octreeDir,l.needsUpdate=!0,l.spacing=i.spacing,l.hierarchyStepSize=i.hierarchyStepSize,l.projection=i.projection,l.offset=o,l.pointAttributes=new X(i.pointAttributes);const d={},u=new ht(i.version);return function(t,e,n,i){const o=new $("r",t,t.boundingBox);o.hasChildren=!0,o.spacing=t.spacing,i.upTo("1.5")?o.numPoints=e.hierarchy[0][1]:o.numPoints=0;return t.root=o,n.r=o,t.root.load()}(l,i,d,u).then(()=>(u.upTo("1.4")&&function(t,e,n){for(let i=1;i<e.hierarchy.length;i++){const[o,r]=e.hierarchy[i],{index:s,parentName:a,level:l}=gt(o),d=n[a],u=Z(d.boundingBox,s),c=new $(o,t,u);c.level=l,c.numPoints=r,c.spacing=t.spacing/Math.pow(2,c.level),n[o]=c,d.addChild(c)}}(l,i,d),l.nodes=d,l))}}(t,e,n)))}function gt(t){return{index:g(t),parentName:t.substring(0,t.length-1),level:t.length-1}}function mt(t){return null!=t&&t.isGeometryNode}function vt(t){return null!=t&&t.isTreeNode}ft.WORKER_POOL=new ct(32,n(6));var xt=n(1);class yt extends c.LineSegments{constructor(t,e=new c.Color(16776960)){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array([t.min.x,t.min.y,t.min.z,t.max.x,t.min.y,t.min.z,t.max.x,t.min.y,t.max.z,t.min.x,t.min.y,t.max.z,t.min.x,t.max.y,t.min.z,t.max.x,t.max.y,t.min.z,t.max.x,t.max.y,t.max.z,t.min.x,t.max.y,t.max.z]),o=new c.BufferGeometry;o.setIndex(new c.BufferAttribute(n,1)),o.setAttribute("position",new c.BufferAttribute(i,3));super(o,new c.LineBasicMaterial({color:e}))}}class _t{constructor(t){this.node=t,this.next=null,this.previous=null}}class bt{constructor(t=1e6){this.pointBudget=t,this.first=null,this.last=null,this.numPoints=0,this.items=new Map}get size(){return this.items.size}has(t){return this.items.has(t.id)}touch(t){if(!t.loaded)return;const e=this.items.get(t.id);e?this.touchExisting(e):this.addNew(t)}addNew(t){const e=new _t(t);e.previous=this.last,this.last=e,e.previous&&(e.previous.next=e),this.first||(this.first=e),this.items.set(t.id,e),this.numPoints+=t.numPoints}touchExisting(t){t.previous?t.next&&(t.previous.next=t.next,t.next.previous=t.previous,t.previous=this.last,t.next=null,this.last=t,t.previous&&(t.previous.next=t)):t.next&&(this.first=t.next,this.first.previous=null,t.previous=this.last,t.next=null,this.last=t,t.previous&&(t.previous.next=t))}remove(t){const e=this.items.get(t.id);e&&(1===this.items.size?(this.first=null,this.last=null):(e.previous||(this.first=e.next,this.first.previous=null),e.next||(this.last=e.previous,this.last.next=null),e.previous&&e.next&&(e.previous.next=e.next,e.next.previous=e.previous)),this.items.delete(t.id),this.numPoints-=t.numPoints)}getLRUItem(){return this.first?this.first.node:void 0}freeMemory(){if(!(this.items.size<=1))for(;this.numPoints>2*this.pointBudget;){const t=this.getLRUItem();t&&this.disposeSubtree(t)}}disposeSubtree(t){const e=[t];t.traverse(t=>{t.loaded&&e.push(t)});for(const t of e)t.dispose(),this.remove(t)}}class Tt{constructor(t,e,n,i){this.pointCloudIndex=t,this.weight=e,this.node=n,this.parent=i}}class At{constructor(){this._pointBudget=1e6,this._rendererSize=new c.Vector2,this.maxNumNodesLoading=4,this.features=st,this.lru=new bt(this._pointBudget),this.updateVisibilityStructures=(()=>{const t=new c.Matrix4,e=new c.Matrix4,n=new c.Matrix4;return(i,o)=>{const r=[],s=[],a=new xt.BinaryHeap(t=>1/t.weight);for(let l=0;l<i.length;l++){const d=i[l];if(!d.initialized())continue;d.numVisiblePoints=0,d.visibleNodes=[],d.visibleGeometry=[],o.updateMatrixWorld(!1);const u=o.matrixWorldInverse,h=d.matrixWorld;if(t.identity().multiply(o.projectionMatrix).multiply(u).multiply(h),r.push((new c.Frustum).setFromProjectionMatrix(t)),e.copy(h).invert(),n.identity().multiply(e).multiply(o.matrixWorld),s.push((new c.Vector3).setFromMatrixPosition(n)),d.visible&&null!==d.root){const t=Number.MAX_VALUE;a.push(new Tt(l,t,d.root))}vt(d.root)&&d.hideDescendants(d.root.sceneNode);for(const t of d.boundingBoxNodes)t.visible=!1}return{frustums:r,cameraPositions:s,priorityQueue:a}}})()}loadPointCloud(t,e,n=((t,e)=>fetch(t,e))){return pt(t,e,n).then(t=>new ot(this,t))}updatePointClouds(t,e,n){const i=this.updateVisibility(t,e,n);for(let i=0;i<t.length;i++){const o=t[i];o.disposed||(o.material.updateMaterial(o,o.visibleNodes,e,n),o.updateVisibleBounds(),o.updateBoundingBoxes())}return this.lru.freeMemory(),i}static pick(t,e,n,i,o={}){return At.picker=At.picker||new nt,At.picker.pick(e,n,i,t,o)}get pointBudget(){return this._pointBudget}set pointBudget(t){t!==this._pointBudget&&(this._pointBudget=t,this.lru.pointBudget=t,this.lru.freeMemory())}static set maxLoaderWorkers(t){ft.WORKER_POOL.maxWorkers=t}static get maxLoaderWorkers(){return ft.WORKER_POOL.maxWorkers}updateVisibility(t,e,n){let i=0;const o=[],r=[],{frustums:s,cameraPositions:a,priorityQueue:l}=this.updateVisibilityStructures(t,e);let d,u=0,c=!1,h=!1;for(;void 0!==(d=l.pop());){let f=d.node;if(i+f.numPoints>this.pointBudget)break;const p=d.pointCloudIndex,g=t[p],m=void 0!==g.maxLevel?g.maxLevel:1/0;if(f.level>m||!s[p].intersectsBox(f.boundingBox)||this.shouldClip(g,f.boundingBox))continue;i+=f.numPoints,g.numVisiblePoints+=f.numPoints;const v=d.parent;if(mt(f)&&(!v||vt(v)))if(f.loaded&&u<2)f=g.toTreeNode(f,v),u++;else{if(f.failed){h=!0;continue}f.loaded&&u>=2&&(c=!0),r.push(f),g.visibleGeometry.push(f)}vt(f)&&(this.updateTreeNodeVisibility(g,f,o),g.visibleGeometry.push(f.geometryNode));const x=.5*n.getSize(this._rendererSize).height*n.getPixelRatio();this.updateChildVisibility(d,l,g,f,a[p],e,x)}const f=Math.min(this.maxNumNodesLoading,r.length),p=[];for(let t=0;t<f;t++)p.push(r[t].load());return{visibleNodes:o,numVisiblePoints:i,exceededMaxLoadsToGPU:c,nodeLoadFailed:h,nodeLoadPromises:p}}updateTreeNodeVisibility(t,e,n){this.lru.touch(e.geometryNode);const i=e.sceneNode;i.visible=!0,i.material=t.material,i.updateMatrix(),i.matrixWorld.multiplyMatrices(t.matrixWorld,i.matrix),n.push(e),t.visibleNodes.push(e),this.updateBoundingBoxVisibility(t,e)}updateChildVisibility(t,e,n,i,o,r,s){const a=i.children;for(let l=0;l<a.length;l++){const d=a[l];if(null===d)continue;const u=d.boundingSphere,c=u.center.distanceTo(o),h=u.radius;let f=0;if("PerspectiveCamera"===r.type){const t=r.fov*Math.PI/180;f=s/(Math.tan(t/2)*c)}else{const t=r;f=2*s/(t.top-t.bottom)}const p=h*f;if(p<n.minNodePixelSize)continue;const g=c<h?Number.MAX_VALUE:p+1/c;e.push(new Tt(t.pointCloudIndex,g,d,i))}}updateBoundingBoxVisibility(t,e){if(t.showBoundingBox&&!e.boundingBoxNode){const n=new yt(e.boundingBox);n.matrixAutoUpdate=!1,t.boundingBoxNodes.push(n),e.boundingBoxNode=n,e.boundingBoxNode.matrix.copy(t.matrixWorld)}else t.showBoundingBox&&e.boundingBoxNode?(e.boundingBoxNode.visible=!0,e.boundingBoxNode.matrix.copy(t.matrixWorld)):!t.showBoundingBox&&e.boundingBoxNode&&(e.boundingBoxNode.visible=!1)}shouldClip(t,e){const n=t.material;if(0===n.numClipBoxes||n.clipMode!==i.CLIP_OUTSIDE)return!1;const o=e.clone();t.updateMatrixWorld(!0),o.applyMatrix4(t.matrixWorld);const r=n.clipBoxes;for(let t=0;t<r.length;t++){const e=r[t].matrix,n=new c.Box3(new c.Vector3(-.5,-.5,-.5),new c.Vector3(.5,.5,.5)).applyMatrix4(e);if(o.intersectsBox(n))return!1}return!0}}}])}));